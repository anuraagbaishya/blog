<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Cve-Analysis on Bayesian Blogs</title>
    <link>http://localhost:1313/tags/cve-analysis/</link>
    <description>Recent content in Cve-Analysis on Bayesian Blogs</description>
    <generator>Hugo</generator>
    <language>en-us</language>
    <lastBuildDate>Sun, 12 Jan 2025 00:08:05 -0700</lastBuildDate>
    <atom:link href="http://localhost:1313/tags/cve-analysis/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Not a CVE: Using Airflow via Docker Can Lead to Arbitrary Code Execution</title>
      <link>http://localhost:1313/posts/reversing-airflow-patches/</link>
      <pubDate>Sun, 12 Jan 2025 00:08:05 -0700</pubDate>
      <guid>http://localhost:1313/posts/reversing-airflow-patches/</guid>
      <description>&lt;p&gt;I have been reading quite a few blogs about analyzing patches for CVEs and generating exploits based on the difference in code between the vulnerable and the fixed versions (&lt;code&gt;diff&lt;/code&gt;). One of my favorites is &lt;a href=&#34;https://www.assetnote.io/resources/research/two-bytes-is-plenty-fortigate-rce-with-cve-2024-21762&#34;&gt;this blog&lt;/a&gt; from the folks at Assetnote about a CVE in Fortigate. While this level of reverse engineering is waaaay beyond what I can even think of attempting, I also read articles about simpler exercises, such as &lt;a href=&#34;https://blog.securelayer7.net/arbitrary-code-execution-in-apache-airflow/&#34;&gt;this&lt;/a&gt; for a CVE in Apache Airflow - which is a direct inspiration for this blog.&lt;/p&gt;</description>
    </item>
    <item>
      <title>CVE-2024-47821: Remote Code Execution in PyLoad</title>
      <link>http://localhost:1313/posts/cve-2024-47821/</link>
      <pubDate>Fri, 25 Oct 2024 17:00:09 -0800</pubDate>
      <guid>http://localhost:1313/posts/cve-2024-47821/</guid>
      <description>&lt;p&gt;I found my first CVE! &lt;a href=&#34;https://www.cve.org/CVERecord?id=CVE-2024-47821&#34;&gt;CVE-2024-47821&lt;/a&gt; (&lt;a href=&#34;https://github.com/pyload/pyload/security/advisories/GHSA-w7hq-f2pj-c53g&#34;&gt;GitHub Advisory&lt;/a&gt;) is a remote code execution vulnerability in &lt;a href=&#34;https://pyload.net/&#34;&gt;PyLoad&lt;/a&gt;. PyLoad is an open source download manager written in Python. The folder &lt;code&gt;~/.pyload/scripts&lt;/code&gt; on the server where PyLoad is installed has scripts which are run when certain actions are completed, for e.g. a download is finished. By downloading a executable file to a folder in &lt;code&gt;~/.pyload/scripts&lt;/code&gt; and performing the respective action, remote code execution can be achieved. A file can be downloaded to such a folder by changing the download folder to a folder in &lt;code&gt;~/.pyload/scripts&lt;/code&gt; path and using the &lt;code&gt;/flashgot&lt;/code&gt; API to download the file.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Analyzing new-ish CVEs in PyLoad</title>
      <link>http://localhost:1313/posts/pyload-cves/</link>
      <pubDate>Sat, 20 Apr 2024 07:56:09 -0700</pubDate>
      <guid>http://localhost:1313/posts/pyload-cves/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;https://pyload.net/&#34;&gt;PyLoad&lt;/a&gt; is an open source download manager written in Python. I first came across PyLoad while solving a HackTheBox machine (PC). Solving the machine required exploiting a pre-auth RCE (&lt;a href=&#34;https://nvd.nist.gov/vuln/detail/CVE-2023-0297&#34;&gt;CVE-2023-0297&lt;/a&gt;). I then rediscovered PyLoad when I was looking for CVEs to analyze. My intention was to analyze around 3-4 CVEs in the same product and PyLoad fit the bill perfectly, as there were 4 CVEs disclosed in January and February 2024. In this article, I will explain the CVEs, examine the provided proof of concepts, and evaluate the fixes.&lt;/p&gt;</description>
    </item>
  </channel>
</rss>
