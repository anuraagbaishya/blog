<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Bayesian Blogs</title>
    <link>http://localhost:1313/</link>
    <description>Recent content on Bayesian Blogs</description>
    <generator>Hugo</generator>
    <language>en-us</language>
    <lastBuildDate>Sun, 12 Jan 2025 00:08:05 -0700</lastBuildDate>
    <atom:link href="http://localhost:1313/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Not a CVE: Using Airflow via Docker Can Lead to Arbitrary Code Execution</title>
      <link>http://localhost:1313/posts/reversing-airflow-patches/</link>
      <pubDate>Sun, 12 Jan 2025 00:08:05 -0700</pubDate>
      <guid>http://localhost:1313/posts/reversing-airflow-patches/</guid>
      <description>&lt;p&gt;I have been reading quite a few blogs about analyzing patches for CVEs and generating exploits based on the difference in code between the vulnerable and the fixed versions (&lt;code&gt;diff&lt;/code&gt;). One of my favorites is &lt;a href=&#34;https://www.assetnote.io/resources/research/two-bytes-is-plenty-fortigate-rce-with-cve-2024-21762&#34;&gt;this blog&lt;/a&gt; from the folks at Assetnote about a CVE in Fortigate. While this level of reverse engineering is waaaay beyond what I can even think of attempting, I also read articles about simpler exercises, such as &lt;a href=&#34;https://blog.securelayer7.net/arbitrary-code-execution-in-apache-airflow/&#34;&gt;this&lt;/a&gt; for a CVE in Apache Airflow - which is a direct inspiration for this blog.&lt;/p&gt;</description>
    </item>
    <item>
      <title>CVE-2024-47821: Remote Code Execution in PyLoad</title>
      <link>http://localhost:1313/posts/cve-2024-47821/</link>
      <pubDate>Fri, 25 Oct 2024 17:00:09 -0800</pubDate>
      <guid>http://localhost:1313/posts/cve-2024-47821/</guid>
      <description>&lt;p&gt;I found my first CVE! &lt;a href=&#34;https://www.cve.org/CVERecord?id=CVE-2024-47821&#34;&gt;CVE-2024-47821&lt;/a&gt; (&lt;a href=&#34;https://github.com/pyload/pyload/security/advisories/GHSA-w7hq-f2pj-c53g&#34;&gt;GitHub Advisory&lt;/a&gt;) is a remote code execution vulnerability in &lt;a href=&#34;https://pyload.net/&#34;&gt;PyLoad&lt;/a&gt;. PyLoad is an open source download manager written in Python. The folder &lt;code&gt;~/.pyload/scripts&lt;/code&gt; on the server where PyLoad is installed has scripts which are run when certain actions are completed, for e.g. a download is finished. By downloading a executable file to a folder in &lt;code&gt;~/.pyload/scripts&lt;/code&gt; and performing the respective action, remote code execution can be achieved. A file can be downloaded to such a folder by changing the download folder to a folder in &lt;code&gt;~/.pyload/scripts&lt;/code&gt; path and using the &lt;code&gt;/flashgot&lt;/code&gt; API to download the file.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Analyzing new-ish CVEs in PyLoad</title>
      <link>http://localhost:1313/posts/pyload-cves/</link>
      <pubDate>Sat, 20 Apr 2024 07:56:09 -0700</pubDate>
      <guid>http://localhost:1313/posts/pyload-cves/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;https://pyload.net/&#34;&gt;PyLoad&lt;/a&gt; is an open source download manager written in Python. I first came across PyLoad while solving a HackTheBox machine (PC). Solving the machine required exploiting a pre-auth RCE (&lt;a href=&#34;https://nvd.nist.gov/vuln/detail/CVE-2023-0297&#34;&gt;CVE-2023-0297&lt;/a&gt;). I then rediscovered PyLoad when I was looking for CVEs to analyze. My intention was to analyze around 3-4 CVEs in the same product and PyLoad fit the bill perfectly, as there were 4 CVEs disclosed in January and February 2024. In this article, I will explain the CVEs, examine the provided proof of concepts, and evaluate the fixes.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Exploring Python Code Execution Patterns for Fun and Profit</title>
      <link>http://localhost:1313/posts/python-rce/</link>
      <pubDate>Sun, 17 Mar 2024 10:01:34 -0800</pubDate>
      <guid>http://localhost:1313/posts/python-rce/</guid>
      <description>&lt;p&gt;Recently, I was looking at the Semgrep output for an open source project and I saw an interesting finding about potential arbitrary code execution. The code essentially ran an &lt;code&gt;eval&lt;/code&gt; but the interesting part was converting Python code to an abstract syntax tree, compiling it to bytecode, and evaluating it. This made me curious about other unsafe ways to write Python code that could lead to code execution. In this article, I will discuss a few patterns that I learnt about through my limited research.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Cocktails</title>
      <link>http://localhost:1313/cocktails/</link>
      <pubDate>Tue, 30 Jan 2024 23:54:28 -0800</pubDate>
      <guid>http://localhost:1313/cocktails/</guid>
      <description>&lt;p&gt;Cocktails are categorized by alcohol which has the highest quantity. Cocktails which have multiple alcohols in the same highest quantity are added to one of the alcohols at random.&lt;/p&gt;&#xA;&lt;h2 id=&#34;rum&#34;&gt;Rum&lt;/h2&gt;&#xA;&lt;h3 id=&#34;sour-monk&#34;&gt;Sour Monk&lt;/h3&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;1 oz Old Monk&lt;/li&gt;&#xA;&lt;li&gt;0.5 oz bourbon&lt;/li&gt;&#xA;&lt;li&gt;1 oz lemon juice&lt;/li&gt;&#xA;&lt;li&gt;0.75 oz simple syrup&lt;/li&gt;&#xA;&lt;li&gt;Garnish: amarena cherry&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h3 id=&#34;off-season&#34;&gt;Off Season&lt;/h3&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;1.5 oz dark rum&lt;/li&gt;&#xA;&lt;li&gt;1 oz rye / bourbon&lt;/li&gt;&#xA;&lt;li&gt;0.5 oz sambuca&lt;/li&gt;&#xA;&lt;li&gt;0.5 oz simple syrup&lt;/li&gt;&#xA;&lt;li&gt;2 oz pineapple juice&lt;/li&gt;&#xA;&lt;li&gt;1 oz lime juice&lt;/li&gt;&#xA;&lt;li&gt;Garnish: pineapple wedge&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h3 id=&#34;jamaican-plane&#34;&gt;Jamaican Plane&lt;/h3&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;1 oz dark rum&lt;/li&gt;&#xA;&lt;li&gt;0.75 oz Aperol&lt;/li&gt;&#xA;&lt;li&gt;0.75 oz Amaro Nonino&lt;/li&gt;&#xA;&lt;li&gt;1 oz lime juice&lt;/li&gt;&#xA;&lt;li&gt;0.5 oz simple syrup&lt;/li&gt;&#xA;&lt;li&gt;1 barspoon mezcal&lt;/li&gt;&#xA;&lt;li&gt;Garnish: amarena cherry and paper plane&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h3 id=&#34;smoky-sea-captain&#34;&gt;Smoky Sea Captain&lt;/h3&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;1 oz dark rum&lt;/li&gt;&#xA;&lt;li&gt;0.5 oz Islay scotch&lt;/li&gt;&#xA;&lt;li&gt;1 oz lemon juice&lt;/li&gt;&#xA;&lt;li&gt;0.5 oz simple syrup&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h2 id=&#34;gin--sloe-gin&#34;&gt;Gin / Sloe Gin&lt;/h2&gt;&#xA;&lt;h3 id=&#34;the-orchard&#34;&gt;The Orchard&lt;/h3&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;2 oz gin&lt;/li&gt;&#xA;&lt;li&gt;1 oz irish whiskey&lt;/li&gt;&#xA;&lt;li&gt;0.25 oz orange bitters&lt;/li&gt;&#xA;&lt;li&gt;1 oz tonic&lt;/li&gt;&#xA;&lt;li&gt;0.5 oz ginger syrup&lt;/li&gt;&#xA;&lt;li&gt;6-8 mint leaves, crushed&lt;/li&gt;&#xA;&lt;li&gt;Garnish: mint sprig&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h3 id=&#34;summer-monsoon&#34;&gt;Summer Monsoon&lt;/h3&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;2 oz gin&lt;/li&gt;&#xA;&lt;li&gt;1 oz Grand Marnier&lt;/li&gt;&#xA;&lt;li&gt;1 oz lemon juice&lt;/li&gt;&#xA;&lt;li&gt;0.5 oz sambuca&lt;/li&gt;&#xA;&lt;li&gt;Garnish: lemon twist&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h3 id=&#34;rose-for-dawn&#34;&gt;Rose for Dawn&lt;/h3&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;0.75 oz gin&lt;/li&gt;&#xA;&lt;li&gt;0.75 oz sloe gin&lt;/li&gt;&#xA;&lt;li&gt;0.75 oz Benedictine&lt;/li&gt;&#xA;&lt;li&gt;0.5 oz grenadine&lt;/li&gt;&#xA;&lt;li&gt;0.75 oz lemon juice&lt;/li&gt;&#xA;&lt;li&gt;Garnish: amarena cherry&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h2 id=&#34;bourbon--rye--whiskey&#34;&gt;Bourbon / Rye / Whiskey&lt;/h2&gt;&#xA;&lt;h3 id=&#34;the-commuter&#34;&gt;The Commuter&lt;/h3&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;1.5 oz bourbon&lt;/li&gt;&#xA;&lt;li&gt;1 oz dry curacao&lt;/li&gt;&#xA;&lt;li&gt;0.5 oz Campari&lt;/li&gt;&#xA;&lt;li&gt;1 oz lemon juice&lt;/li&gt;&#xA;&lt;li&gt;0.5 oz simple syrup&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h3 id=&#34;amber-ember&#34;&gt;Amber Ember&lt;/h3&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;1.5 oz spiced whiskey&lt;/li&gt;&#xA;&lt;li&gt;0.5 oz maraschino liquer&lt;/li&gt;&#xA;&lt;li&gt;0.5 oz Benedictine&lt;/li&gt;&#xA;&lt;li&gt;1 oz lemon cordial&lt;/li&gt;&#xA;&lt;li&gt;0.5 oz lemon juice&lt;/li&gt;&#xA;&lt;li&gt;3 dashes orange bitters&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h2 id=&#34;other-spirits&#34;&gt;Other spirits&lt;/h2&gt;&#xA;&lt;h3 id=&#34;golden-charm&#34;&gt;Golden Charm&lt;/h3&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;1 oz Amaro Nonino&lt;/li&gt;&#xA;&lt;li&gt;0.5 oz sloe gin&lt;/li&gt;&#xA;&lt;li&gt;0.5 oz dry curacao&lt;/li&gt;&#xA;&lt;li&gt;0.5 oz elderflower liquer&lt;/li&gt;&#xA;&lt;li&gt;1 oz lemon juice&lt;/li&gt;&#xA;&lt;li&gt;Garnish: lemon twist&lt;/li&gt;&#xA;&lt;/ul&gt;</description>
    </item>
    <item>
      <title>About</title>
      <link>http://localhost:1313/about/</link>
      <pubDate>Sun, 28 Jan 2024 16:49:25 -0800</pubDate>
      <guid>http://localhost:1313/about/</guid>
      <description>&lt;p&gt;Hello friend! Thank you for stopping by! If you have stumbled upon this page, you might be looking to know more about me. My name is Anuraag Baishya. Some of my friends like to call me &amp;ldquo;Bayesian&amp;rdquo; which is why this blog is titled &lt;em&gt;Bayesian Blog&lt;/em&gt;.&lt;/p&gt;&#xA;&lt;p&gt;By day I work on Palo Alto Networks&amp;rsquo; PSIRT team as a Sr. Staff Product Security Engineer, dealing with all things PSIRT such as handling reports and incidents, working with our engineers to investigate said reports and help them fix bugs, releasing advisories, and any other operations you would imagine a PSIRT personnel would need to handle.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Tales from my Product Security Job Hunt: Part 2, Preparation</title>
      <link>http://localhost:1313/posts/interview-prep/</link>
      <pubDate>Sun, 14 Jan 2024 21:51:34 -0800</pubDate>
      <guid>http://localhost:1313/posts/interview-prep/</guid>
      <description>&lt;p&gt;This is part 2 of my interview experience and preparation series, where I will talk about how I prepared for the interviews. Check out part 1 where I talk more about the process and types of interviews &lt;a href=&#34;https://www.baishya.xyz/posts/types-of-interviews/&#34;&gt;here&lt;/a&gt;&lt;/p&gt;&#xA;&lt;p&gt;As I mentioned in my previous post, this is catered to my search criteria, which was:&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;Experience: Mid-level (~4–5 years of experience)&lt;/li&gt;&#xA;&lt;li&gt;Role: Product Security / Application Security&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;Even within the roles I was looking for, different openings had slightly different requirements. For example, an application security role for a team/company that has a large mobile application footprint is likely to involve duties related to securing these applications — and therefore, the candidate would be expected to know about mobile application security.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Tales from my Product Security Job Hunt: Part 1, Interview Types</title>
      <link>http://localhost:1313/posts/types-of-interviews/</link>
      <pubDate>Sun, 07 Jan 2024 16:12:46 -0800</pubDate>
      <guid>http://localhost:1313/posts/types-of-interviews/</guid>
      <description>&lt;p&gt;After spending 4 amazing years at Adobe, I recently decided it was time to take the next step in my career. I was fortunate to interview with several companies that varied in terms of their domain, size, or the maturity of their security processes.&lt;/p&gt;&#xA;&lt;p&gt;Many of those whom I informed about my decision and/or my interviews were interested in knowing what the process was like and how I prepared. After answering the same questions a few times, I thought it would be helpful to potential job seekers if I documented my experiences. Therefore, I am writing this two-part series that will talk about the types of interviews I attempted, and how I prepared for them. This blog in particular will list the types of interviews. In the next one, I will talk about my preparation and provide some tips that worked for me.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Hack the Box — PC, but automated</title>
      <link>http://localhost:1313/posts/htb-pc/</link>
      <pubDate>Mon, 06 Nov 2023 20:05:09 -0800</pubDate>
      <guid>http://localhost:1313/posts/htb-pc/</guid>
      <description>&lt;p&gt;PC is an easy Linux box that has a grpc service and a vulnerable version of an application running on it. While doing this box, I had gone to the forums for a hint, and I saw a comment that said something along the lines of “I wrote a script that can solve this box”. I found this quite intriguing and decided to write a script that could solve the box myself.&lt;/p&gt;</description>
    </item>
    <item>
      <title></title>
      <link>http://localhost:1313/menu/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/menu/</guid>
      <description>&lt;ol&gt;&#xA;&lt;li&gt;Gin &amp;amp; Tonic: Gin, Elderflower Liquer, Tonic&lt;/li&gt;&#xA;&lt;li&gt;Old Fashioned: Rye Whiskey, Bitters&lt;/li&gt;&#xA;&lt;li&gt;Monte Carlo: Rye Whiskey, Benedictine, Bitters&lt;/li&gt;&#xA;&lt;li&gt;Smoky Sea Captain: Rum, Islay Scotch, Lemon&lt;/li&gt;&#xA;&lt;li&gt;Daiquiri: Rum, Lime&lt;/li&gt;&#xA;&lt;li&gt;Whisky Sour: Rye Whiskey, Lemon&lt;/li&gt;&#xA;&lt;/ol&gt;</description>
    </item>
    <item>
      <title>PGP Key</title>
      <link>http://localhost:1313/pgp/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/pgp/</guid>
      <description>&lt;p&gt;If you would like to encrypt your emails to me, you can use my PGP key:&lt;/p&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;-----BEGIN PGP PUBLIC KEY BLOCK-----&#xA;&#xA;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&#xA;NddZwp9jxQjw2zR/57HgGiWEn+xVk2I=&#xA;=kLRx&#xA;-----END PGP PUBLIC KEY BLOCK-----&#xA;&lt;/code&gt;&lt;/pre&gt;</description>
    </item>
  </channel>
</rss>
